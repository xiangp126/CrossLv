# part1 in .vimrc
" Plug 'Yggdroot/LeaderF', { 'on': 'LeaderfFunction' }

# part2 in .vimrc
""""""""""""""""""""""""""""
CONFIG LEADERF
""""""""""""""""""""""""""""
" map <leader>F  :LeaderfFile<CR>
let g:Lf_ShortcutF = '<leader>F'
let g:Lf_StlColorscheme = 'dark_leaderf'
let g:Lf_WindowHeight = 0.50
let g:Lf_WildIgnore = {
   \ 'dir': ['.svn','.git','.hg', '.acme_project', '.ACMEROOT'],
   \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
   \}
" press <F5> to refresh the cache.
let g:Lf_DelimiterChar = ';'
let g:Lf_MruFileExclude = ['*.so']
let g:Lf_CommandMap = {'<C-C>': ['<Esc>', '<C-C>']}
let g:Lf_HighlightIndividual = 0
let g:Lf_StlSeparator = { 'left': '', 'right': ''  }
map <leader><leader>f   :LeaderfFunction<CR>
map <leader><leader>fa  :LeaderfFunctionAll<CR>
map <leader><leader>fw  :LeaderfFunctionCword<CR>
" search line which has the word
map <leader><leader>l   :LeaderfLine<CR>
map <leader><leader>la  :LeaderfLineAll<CR>
map <leader><leader>lw  :LeaderfLineCword<CR>
" search line match word | end
map <leader><leader>m   :LeaderfMruCwd<CR>
map <leader><leader>ma  :LeaderfMru<CR>

# part in onekey.sh
doExtraForLeaderF() {
    cat << "_EOF"
------------------------------------------------------
COPYING DARK_LEADERF.VIM AS DEFAULT LEADERF COLORSCHEME
------------------------------------------------------
_EOF
    myLeaderFColor=./template/dark_leaderf.vim
    cpColorDst=$HOME/.vim/bundle/LeaderF/autoload/leaderf/colorscheme/
    if [[ ! -d $cpColorDst ]]; then
        echo "[Error]: no leaderf color dir found, please check it"
        return 255
    fi

    cd $mainWd
    cp $myLeaderFColor $cpColorDst
    retVal=$?
    if [[ $retVal != 0 ]]; then
        echo "[Error]: copy private leaderf color return with value $retVal"
        exit 255
    fi

    leaderfInstDir=$HOME/.vim/bundle/LeaderF
    if [[ ! -d $leaderfInstDir ]]; then
        echo "[Warning]: found no LeaderF, please check it"
        return
    fi
    cat << "_EOF"
------------------------------------------------------
INSTALLING FUZZY MATCHING ALGORITHM FOR LEADERF
------------------------------------------------------
_EOF
    cd $leaderfInstDir
    sh -x ./install.sh
    retVal=$?
    if [[ $retVal != 0 ]]; then
        echo "[Warning]: Install fuzzy for LeaderF return with value $retVal "
    fi
}
