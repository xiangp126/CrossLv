#!/usr/bin/expect -f
set header_exp get_credentials

# Get the real directory of the script, resolving any symlinks
set script_path [file normalize [info script]]
# puts "script path is : $script_path"

# Determine the directory of the real script
set script_directory [file dirname $script_path]

# Source the other Expect script in the same directory
source "$script_directory/$header_exp"

# Set a custom timeout value in seconds (e.g., 180 seconds)
set custom_timeout 180

# Check if an argument is provided
if {$argc > 0} {
    # Access the variable from the command line argument
    set mode [lindex $argv 0]
}

# Import necessary functions and set variables
set prompt "$ "

set script_location "/tmp/git_upall_repos"

if {![file exists $script_location]} {
    set script_contents {#!/bin/bash

# Define the directory containing your Git repositories
repo_dir="/opt/src"

# Function to update a Git repository
update_git_repo() {
    local repo_path="$1"

    echo -e  "\nUpdating repository: $repo_path"

    # Change to the repository directory
    cd "$repo_path" || exit 1

    # Check if it's a Git repository
    if [ -d ".git" ]; then
        # Get the current branch name
        current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)

        if [ "$current_branch" == "master" ] || [ "$current_branch" == "main" ]; then
            echo "Currently on the $current_branch branch"
        else
            # Check if "master" exists, and if not, check if "main" exists
            if git show-ref --verify --quiet "refs/heads/master"; then
                git checkout master
            elif git show-ref --verify --quiet "refs/heads/main"; then
                git checkout main
            else
                echo "Neither 'master' nor 'main' branch found."
                return 1
            fi
        fi
        # Pull the latest changes
        git pull
    else
        echo "Not a Git repository: $repo_path"
    fi

    # Return to the original directory
    cd - &>/dev/null
}

# Check if the directory exists
if [ ! -d "$repo_dir" ]; then
    echo "Error: The directory $repo_dir does not exist."
    exit 1
fi

# List all subdirectories in the repository directory
repos=$(find "$repo_dir" -mindepth 1 -maxdepth 1 -type d)

# Loop through each repository and update it
for repo in $repos; do
    update_git_repo "$repo"
done

# call the indexer
if command -v callIndexer &> /dev/null; then
    # The command callIndexer exists, so you can execute it
    callIndexer
else
    echo "callIndexer command not found"
fi
}}

# Create the bash script
set script_file [open $script_location "w"]
puts $script_file $script_contents
close $script_file

# Set the executable permission for the script
exec chmod +x $script_location

# run authentication
spawn ssh git@git-van.corp.fortinet.com 2fa_verify
expect {
    "username: " {
        send "$username\r"
        exp_continue
    }
    "password:" {
        send "$password\r"
        exp_continue
    }
    "OTP: " {
        expect_user -re "(.*)\n"
        set token $expect_out(1,string)
        send "$token\r"
    }
    timeout {
        puts "Timed out waiting for a response."
        exit 1
    }
}
wait

# run the bash script
spawn bash $script_location
expect {
    -re "Username: " {
        send "$username\r"
        exp_continue
    }
    -re "Password:" {
        send "$password\r"
        exp_continue
    }
    -re "fatal: " {
        exit 1
    }
    timeout {
        puts "Timed out waiting for a response."
        exit 1
    }
}

wait
