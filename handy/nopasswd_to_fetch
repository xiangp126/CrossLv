#!/usr/bin/expect -f

set header_exp get_credentials

# Get the real directory of the script, resolving any symlinks
set script_path [file normalize [info script]]
# puts "script path is : $script_path"

# Determine the directory of the real script
set script_directory [file dirname $script_path]

# Source the other Expect script in the same directory
source "$script_directory/$header_exp"

# Set a custom timeout value in seconds (e.g., 180 seconds)
set custom_timeout 180

set script_location "/tmp/git_fetch_repos"

if {![file exists $script_location]} {
    set script_contents {#!/bin/bash

# Define the directory containing your Git repositories
repos=(
    "$HOME/myGit/fos"
    "/data/fos2"
    "/data/fortiproxy"
)

# Function to update a Git repository
update_git_repo() {
    local repo_path="$1"

    echo -e  "\nUpdating repository: $repo_path"

    # Change to the repository directory
    cd "$repo_path" || exit 1

    # Check if it's a Git repository
    if [ -d ".git" ]; then
        git fetch origin main
    else
        echo "Not a Git repository: $repo_path"
    fi

    # Return to the original directory
    cd - &>/dev/null
}

# Loop through each repository and update it
for repo in "${repos[@]}"; do
    update_git_repo "$repo"
done
}
# Create the bash script
set script_file [open $script_location "w"]
puts $script_file $script_contents
close $script_file

# Set the executable permission for the script
exec chmod +x $script_location
}

# Spawn your target script or command using the "mode" variable
spawn ssh git@git-van.corp.fortinet.com 2fa_verify

# Set the timeout value for this specific interaction
set timeout $custom_timeout

expect {
    "username: " {
        send "$username\r"
        exp_continue
    }
    "password:" {
        send "$password\r"
        exp_continue
    }
    "OTP: " {
        # Prompt for and read the FortiToken from the user
        expect_user -re "(.*)\n"
        set token $expect_out(1,string)
        send "$token\r"
    }
    timeout {
        # Handle timeout actions, such as error handling
        puts "Timed out waiting for a response."
        exit 1
    }
}

# run the bash script
spawn bash $script_location
expect {
    -re "Username: " {
        send "$username\r"
        exp_continue
    }
    -re "Password:" {
        send "$password\r"
        exp_continue
    }
    -re "fatal: " {
        exit 1
    }
    timeout {
        puts "Timed out waiting for a response."
        exit 1
    }
}

wait
