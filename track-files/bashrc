#!/bin/bash
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# shopt -s globstar

# bash command prompt
export PS1="\u@${HOSTNAME:0:10}:\W\$ "

# Let <C-S> work in Vim.
stty -ixon

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
# alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Below is my own configuration.
export LS_COLORS=$LS_COLORS:'ex=0;0'
if [[ "`uname -s`" == 'Darwin' ]]; then
    # Compatible with Mac
    alias ls='ls -G'
    # alias netstat='netstat -an -p tcp'
else
    # Linux
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    # alias netstat='netstat -tuanp'
fi
alias ll='ls -lF'
alias ll.='ls -alF'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep -i --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias gdb='gdb -q'
alias bat='bat --pager "less -iRF"'
# alias valgrind='valgrind --tool=memcheck --leak-check=full --show-reachable=yes'
alias rg='rg -S'
alias 7zP='7z a -mhe=on -p'
alias 7zA='7z a'
alias 7zX='7z x'
alias tmux='tmux -u'
# alias to change directory
function __cd () {
    if [ -d "$1" ]; then
        cd "$1"
    fi
}
alias cdD='__cd $HOME/Downloads'
alias cdU='__cd $HOME/Uploads'
alias cdP='__cd $HOME/Public'
alias cdR='__cd $HOME/Recycled'
alias cdL='__cd $HOME/Logs'
alias cdT='__cd $HOME/Templates'
alias cdt='__cd $HOME/Test'
alias cdd='__cd /data'
alias cdsrc='__cd /usr/local/src'
alias cdg='__cd $HOME/myGit'
alias cdb='__cd $HOME/.usr/bin'
alias cdf='cdg && cd fos'

# print entry names without quoting
export QUOTING_STYLE=literal
export BAT_THEME=TwoDark

# Useful local variables.
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export SHELL=/bin/bash
export EDITOR=vim
PKG_CONFIG_PATH=$HOME/.usr/lib/pkgconfig:/usr/local/lib/pkgconfig
LD_LIBRARY_PATH=$HOME/.usr/lib:$HOME/.usr/lib64:/usr/local/lib:/usr/local/lib64
PATH=$HOME/.usr/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    PATH=$PATH:$HOME/.local/bin
fi
export PATH
export PKG_CONFIG_PATH
export LD_LIBRARY_PATH
unset TMOUT
# Fortios variables.
export FORTIPKG="$HOME/fortipkg"
export USESUDO=`which sudo`
alias build_tags='ctags -R --extra=+f --languages=C,+C++ --links=no;cscope -Rbqk'

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

fzf_bash_completion="$HOME/.vim/bundle/fzf-tab-completion/bash/fzf-bash-completion.sh"
if [[ -f "$fzf_bash_completion" ]]; then
    source $fzf_bash_completion
    bind -x '"/\t": fzf_bash_completion'
fi

# Loop to source extra bash completions
extraCompletionDir=$HOME/.bash_completion.d
if [[ -d "$extraCompletionDir" ]]; then
    for file in `find $extraCompletionDir -regex ".*.bash$" -type f`
    do
        source $file
    done
fi

# Settings for fzf -- the fuzzy finder
# Use fd (https://github.com/sharkdp/fd) instead of the default find
if [[ "`which fd 2> /dev/null`" != '' ]]; then
    FZF_DEFAULT_COMMAND="fd . \
        --type f \
        --hidden \
        --follow \
        --no-ignore \
        --exclude '.git' \
        --exclude '*.sw[p|o]' \
        --exclude '*.[a|o]' \
        --exclude '*.so'"
    FZF_DEFAULT_COMMAND=${FZF_DEFAULT_COMMAND//+([[:space:]])/ }
    FZF_ALT_C_COMMAND="fd . \
        --type d \
        --hidden \
        --follow \
        --no-ignore \
        --exclude '.git'"
    FZF_ALT_C_COMMAND=${FZF_ALT_C_COMMAND//+([[:space:]])/ }
    export FZF_DEFAULT_COMMAND
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND

    _fzf_compgen_path() {
        eval $FZF_DEFAULT_COMMAND
    }
    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        eval $FZF_ALT_C_COMMAND
    }
fi
export LINES=100
export FZF_TMUX_HEIGHT=50%
export FZF_DEFAULT_OPTS='--layout=reverse --inline-info --color=fg+:247'
# Use * as the trigger sequence instead of the default ** followed by a TAB
export FZF_COMPLETION_TRIGGER='\'
# Options to fzf command
export FZF_COMPLETION_OPTS='+c -x'

# Mapping capslock to esc
pathOfsetxkbmap=`which setxkbmap 2> /dev/null`
if [[ "$pathOfsetxkbmap" != "" && "$DISPLAY" != "" ]]; then
    setxkbmap -option caps:escape
fi

# Test if command 'tmux' exist.
if command -v tmux &>/dev/null; then
    sessions=$(tmux list-sessions 2>/dev/null)
    if [[ -n "$sessions" ]]; then
cat << _EOF
`tmux ls`
_EOF
    fi
fi
