### Basic ###
# The directory to store the downloaded file.
dir=${HOME}/aria2Downloads
# Downloads the URIs listed in FILE.
input-file=${HOME}/.aria2/aria2.session.main
# Save error/unfinished downloads to FILE on exit.
save-session=${HOME}/.aria2/aria2.session.main
# Save error/unfinished downloads to a file specified by --save-session option every SEC seconds.
# If 0 is given, file will be saved only when aria2 exits. Default: 0
save-session-interval=30
# Set the maximum number of parallel downloads for every queue item.
# See also the --split option. Default: 5
max-concurrent-downloads=5
# Continue downloading a partially downloaded file.
continue=true
# Set max overall download speed in bytes/sec. 0 means unrestricted. Default: 0
max-overall-download-limit=0
# Set max download speed per each download in bytes/sec. 0 means unrestricted. Default: 0
max-download-limit=0

### Advanced ###
# Restart download from scratch if the corresponding control file doesn't exist. Default: false
allow-overwrite=true
# If false is given, aria2 aborts download when a piece length is different from one in a control file.
# If true is given, you can proceed but some download progress will be lost. Default: false
allow-piece-length-change=true
# Always resume download.
# If true is given, aria2 always tries to resume download and if resume is not possible, aborts download.
# If false is given, when all given URIs do not support resume
# or aria2 encounters N URIs which does not support resume, aria2 downloads file from scratch. Default: true
always-resume=true
# Enable asynchronous DNS. Default: true
# async-dns=false
# Rename file name if the same file already exists.
# This option works only in HTTP(S)/FTP download. Default: true
auto-file-renaming=true
# Handle quoted string in Content-Disposition header as UTF-8 instead of ISO-8859-1.
# For example, the filename parameter, but not the extended version filename. Default: false
content-disposition-default-utf8=true
# Enable disk cache. If SIZE is 0, the disk cache is disabled.
# This feature caches the downloaded data in memory, which grows to at most SIZE bytes.
# SIZE can include K or M. Default: 16M
disk-cache=64M

# Specify file allocation method. none doesn't pre-allocate file space.
# Possible Values: none, prealloc, trunc, falloc. Default: prealloc
# falloc will cause operation failed error. Recommand to use none here.
file-allocation=none
# No file allocation is made for files whose size is smaller than SIZE. Default: 5M
no-file-allocation-limit=8M
# Make aria2 quiet (no console output). Default: false
quiet=false
# Set log level to output to console. LEVEL is either debug, info, notice, warn or error. Default: notice
# console-log-level=notice
# Set log level to output. LEVEL is either debug, info, notice, warn or error. Default: debug
log-level=error
# log-level=debug
# The file name of the log file. If - is specified, log is written to stdout.
# If empty string("") is specified, or this option is omitted, no log is written to disk at all.
log=${HOME}/.aria2/aria2.log

### RPC ###
# Enable JSON-RPC/XML-RPC server. Default: false
enable-rpc=true
# Pause download after added. This option is effective only when --enable-rpc=true is given. Default: false
# pause=false
# Save the uploaded torrent or metalink meta data in the directory specified by --dir option.
# If false is given to this option, the downloads added will not be saved by --save-session option. Default: true
# rpc-save-upload-metadata=true
# Add Access-Control-Allow-Origin header field with value * to the RPC response. Default: false
rpc-allow-origin-all=true
# Listen incoming JSON-RPC/XML-RPC requests on all network interfaces.
# If false is given, listen only on local loopback interface. Default: false
rpc-listen-all=true
# Specify a port number for JSON-RPC/XML-RPC server to listen to. Possible Values: 1024 -65535 Default: 6800
# rpc-listen-port=50100
# Set RPC secret authorization token.
rpc-secret=
# RPC transport will be encrypted by SSL/TLS. The RPC clients must use https scheme to access the server.
# For WebSocket client, use wss scheme.
# Use --rpc-certificate and --rpc-private-key options to specify the server certificate and private key.
rpc-secure=true
# Use this command to generate the self-signed certificate and private key.
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout aria2.key -out aria2.crt
# Use the certificate in FILE for RPC server.
# The certificate must be either in PKCS12 (.p12, .pfx) or in PEM format.
# When using PEM, you have to specify the private key via --rpc-private-key as well.
# Use --rpc-secure option to enable encryption.
rpc-certificate=${HOME}/.aria2/ssl/aria2.crt
# Use the private key in FILE for RPC server.
# The private key must be decrypted and in PEM format.
# Use --rpc-secure option to enable encryption.
rpc-private-key=${HOME}/.aria2/ssl/aria2.key
check-certificate=true
ca-certificate=/etc/ssl/certs/ca-certificates.crt
# If you use Web UI like Ariang to connect to the aria2c server.
# Since this aria2.crt is a self-signed certificate you have to tell your browser to accept it.
# Go to https://your-server:6800 and confirm the security exception.
# You will only see a blank page, but that's it.
# Then the web UI should be able to connect to aria2.

### HTTP/FTP/SFTP ###
# The maximum number of connections to one server for each download. Default: 1
max-connection-per-server=16
# aria2 does not split less than 2*SIZE byte range. Possible Values: 1M -1024M. Default: 20M
min-split-size=8M
# Download a file using N connections.
# The number of connections to the same host is restricted by the --max-connection-per-server option. Default: 5
split=32
# Set user agent for HTTP(S) downloads. Default: aria2/$VERSION, $VERSION is replaced by package version.
# user-agent=Transmission/2.77

### BitTorrent ###
# Save meta data as ".torrent" file. Default: false
# bt-save-metadata=false
# Set TCP port number for BitTorrent downloads.
# Multiple ports can be specified by using ',' and '-'. Default: 6881-6999
# listen-port=50101-50109
# Set max overall upload speed in bytes/sec. 0 means unrestricted. Default: 0
max-overall-upload-limit=1K
# Set max upload speed per each torrent in bytes/sec. 0 means unrestricted. Default: 0
# max-upload-limit=0
# Specify share ratio. Seed completed torrents until share ratio reaches RATIO.
# Specify 0.0 if you intend to do seeding regardless of share ratio. Default: 1.0
# seed-ratio=0.1
# Specify seeding time in (fractional) minutes. Specifying --seed-time=0 disables seeding after download completed.
seed-time=0
# Enable Local Peer Discovery.
# If a private flag is set in a torrent, aria2 doesn't use this feature for that download even if true is given.
# Default: false
# bt-enable-lpd=false
disable-ipv6=true

# Enable IPv4 DHT functionality. It also enables UDP tracker support.
# If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given. Default: true
enable-dht=true
# Change the IPv4 DHT routing table file PATH.
# Default: $HOME/.aria2/dht.dat if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat.
# Do not create the dht file yourself, aria2 will create it for you.
dht-file-path=${HOME}/.aria2/dht.dat.main
# Enable IPv6 DHT functionality.
# If a private flag is set in a torrent, aria2 doesn't use DHT for that download even if true is given.
enable-dht6=false
# Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker. Default: 6881-6999
# dht-listen-port=50101-50109
# Set host and port as an entry point to IPv4 DHT network.
# dht-entry-point=dht.transmissionbt.com:6881
# Set host and port as an entry point to IPv6 DHT network.
# dht-entry-point6=dht.transmissionbt.com:6881

# Enable Peer Exchange extension.
# If a private flag is set in a torrent, this feature is disabled for that download even if true is given. Default: true
enable-peer-exchange=true
# peer-agent=aria2/$MAJOR.$MINOR.$PATCH
bt-tracker=https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt,https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all_ip.txt
