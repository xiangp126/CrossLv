#!/bin/bash

script_name=$(basename $0)
user_notation="@@@@"
password=""
login_user="admin"
fgt_name="fgt1"
max_iterations=2

usage() {
cat << _EOF

usage:
    $script_name [-p password] [-u user] [-t fgt_name/fgt_ip]

Options:
    -u user             User to use for login. Default is "$login_user"
    -p password         Password to use for login. Default is "$password"
    -t fgt_name/fgt_ip  The device to connect to. Default is "$fgt_name"

Example:
    $script_name -p 123 -u admin -t fgt1
    $script_name -p 123 -u admin -t 172.16.67.181
    $script_name -p 123 -t 172.16.67.181

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "p:u:t:h" opt; do
    case ${opt} in
        p)
            password=$OPTARG
            ;;
        u)
            login_user=$OPTARG
            ;;
        t)
            fgt_name=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "$user_notation Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$user_notation Illegal non-option arguments: $@"
    exit
fi

expect -c "
    set fgt_prompt \"# \"

    for {set i 1} {\$i <= $max_iterations} {incr i} {
        # ssh -o StrictHostKeyChecking=no $fgt_name
        # send_user \"Sync attempt \$i/$max_iterations\n\"
        spawn -noecho ssh $login_user@$fgt_name

        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                send \"$password\r\"
                exp_continue
            }
            \"Host key verification failed.\" {
                send_user \"$user_notation Host key verification failed. Updating known_hosts file...\n\"
                system \"ssh-keygen -R $fgt_name\"
                send_user \"$user_notation Host key removed from known_hosts file.\n\"
                send_user \"$user_notation Retrying SSH immediately...\n\"
                continue
            }
            \"Connection refused\" {
                send_user \"$user_notation Connection refused. Exiting...\n\"
                exit 1
            }
            eof {
                puts \"Reached EOF. Exiting...\"
                exit 1
            }
            timeout {
                puts \"Timed out waiting for a response.\"
                exit 1
            }
            \$fgt_prompt {
                puts \"$user_notation Successfully connected to $fgt_name\"
                break
            }
        }
    }

    send \"\r\"
    expect \$fgt_prompt

    # Now you can add additional commands or interactions as needed
    # For example, you can automate further commands here

    # Interact with the device
    interact
"
