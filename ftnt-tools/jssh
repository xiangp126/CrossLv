#!/bin/bash

# SSH Port Forwarding
# -L [bind_address:]port:host:hostport
# -N Do not execute a remote command. This is useful for just forwarding ports.
# Topology:
# Local(127.0.0.1):8881 --- SSH Connect --- Jump Server(172.18.20.226):22 --- Forward Traffic --- Remote(10.40.1.101):22
# Usage:
# $ ssh -N -L Local_IP:Local_Port:Remote_IP:Remote_Port Jump_User@Jump_IP:Jump_Port
# Jump_User@Jump_IP's Passwd:
#
# Give an example:
# $ ssh -N -L 127.0.0.1:8881:10.40.1.101:22 test@172.18.20.226
# test@172.18.20.226's Passwd:
#
# $ netstat -tulnp | grep -i 8881
# tcp        0      0 127.0.0.1:8881          0.0.0.0:*               LISTEN      1208750/ssh
#
# and then
# $ ssh -l admin -p 8881 localhost
# or
# $ jssh -l admin -P 8881 -t localhost

# Shared Variables
# Match "$ ", "# " or "sftp> " at the end of the line
fGroupPattern='(\$|#|sftp>)\s*$' # For Literal Interpretation, use single quotes
fDollarPattern='\$\s*$'
fPoundPattern='#\s*$'
# fSftpPattern='sftp>\s*$'
fSwitchToSftp=""
fServerAliveInterval=30
fServerAliveCountMax=3
fLiveCapture=""
fLiveCapturePort="7777"
fLCBaseCmd=""
# SSH Variables
fSSHTarget="fgt1"
fSSHUser="admin"
fSSHPwd="password"
fSSHPort=22
fVdom=""
fSSHCmd="" # The command to execute remotely without opening an interactive login session
fSSHNoShell=""
fSpawnCmd=""
# Jump Server Variables
fJumpServer=""
fJumpUser=""
fJumpPwd=""
fJumpPort=22
fNeedJumpServer=""
fMaxAttempts=2
# Constants
SCRIPT_NAME=$(basename "$0")
USER_NOTATION="@@@@"
SEPARATOR="---------------------------------------------------"
SHORT_SEPARATOR="--------------------------------------"
# Colors
RED='\033[31m'
MAGENTA='\033[35m'
GREEN='\033[32m'
GREY='\033[90m'
BLUE='\033[34m'
NORMAL='\033[0m'
RESET='\033[0m'

usage() {
cat << _EOF
$SCRIPT_NAME 1.0

usage:
    $SCRIPT_NAME [-l/-u user] [-p passwd] [-P ssh_port] [-J jump_server] [-W jump_passwd] [-C]
         [-v vdom] [-F] [-c ssh_cmd] -t target_ip

    Default to SSH, use -F to switch to SFTP

Options:
    -t     Target        The device to connect to. Default is "$fSSHTarget"
    -l/-u  Username      Username for login. Default is "$fSSHUser"
    -p     Password      Password for login. Default is "$fSSHPwd"
    -P     Port          SSH Port to connect to. Default is "$fSSHPort"
    -v     Vdom          Specify the VDOM. Default is "$fVdom"
    -c     Command       Execute commands remotely without opening an interactive login session
    -C     Capture       Live capture packets from the remote device
    -J     Jump Server   The jump server to connect to. Format: user@jumpserver[:port]
    -W     Jump Passwd   Password for jump server. Default is "$fJumpPwd"
    -F     SFTP          Switch to SFTP
    -h     Help          Print this help message

Example:
    # SSH Connection
    $SCRIPT_NAME -t fpx1
    $SCRIPT_NAME -t 172.18.52.37 -l admin -p "FGT\!34"
    $SCRIPT_NAME -t 172.18.52.37 -l admin -p "FGT\!34" -c "whoami"
    $SCRIPT_NAME -t 172.18.52.37 -l admin -p "FGT\!34" -P 8822 -v root
    # Remote Live Capture
    $SCRIPT_NAME -t 172.18.52.37 -l admin -p "FGT\!34" -R
    # SSH with a Jump Server
    $SCRIPT_NAME -J auto@172.18.20.84:8022 -W qaz -t test@10.120.1.111:2121 -p 123
    $SCRIPT_NAME -J auto@172.18.20.84:8022 -W qaz -t test@10.120.1.111 -P 2121 -p 123
    # SFTP Connection
    $SCRIPT_NAME -t fpx1 -F
    # SFTP with a Jump Server
    $SCRIPT_NAME -J auto@172.18.20.84:8022 -W qaz -t test@10.120.1.111:2121 -p 123 -F

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "t:l:u:p:P:J:W:v:c:FCh" opt; do
    case ${opt} in
        t)
            fSSHTarget=$OPTARG
            ;;
        l) # User
            fSSHUser=$OPTARG
            ;;
        u) # User
            fSSHUser=$OPTARG
            ;;
        p)
            fSSHPwd=$OPTARG
            ;;
        P)
            fSSHPort=$OPTARG
            ;;
        c)
            COLOR=$MAGENTA
            fSSHCmd=$OPTARG
            if [ -n "$fSSHCmd" ]; then
                # Only set this flag when $fSSHCmd is not empty
                fSSHNoShell=true
            fi
            ;;
        C)
            fLiveCapture=true
            ;;
        J)
            fNeedJumpServer=true
            fJumpServer=$OPTARG
            ;;
        W)
            fJumpPwd=$OPTARG
            ;;
        v)
            fVdom=$OPTARG
            ;;
        F)
            fSwitchToSftp=true
            ;;
        h)
            usage
            ;;
        ?)
            COLOR=$MAGENTA
            echo -e "${COLOR}Error: Invalid option: -$OPTARG${RESET}" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $param, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    COLOR=$MAGENTA
    echo -e "${COLOR}Error: Illegal non-option arguments: $@${RESET}"
    exit
fi

parseAndCheck() {
    # Check if the target is in the format of user@sshtarget:port
    param=$fSSHTarget
    if [[ $fSSHTarget == *@* ]]; then
        fSSHUser=$(echo "$param" | cut -d@ -f1)
        fSSHTarget=$(echo "$param" | cut -d@ -f2)

        # Extract the port if it exists
        # fSSHTarget=172.18.20.84:2121
        param=$fSSHTarget
        if [[ $param == *:* ]]; then
            fSSHTarget=$(echo "$param" | cut -d: -f1)
            fSSHPort=$(echo "$param" | cut -d: -f2)
        fi
    fi

    # Check if the jump server is in the format of user@jumpserver:port
    if [ "$fNeedJumpServer" = true ]; then
        # Exp: fJumpServer=auto@172.18.20.84:2121
        param=$fJumpServer
        if [[ $fJumpServer == *@* ]]; then
            if [[ $param == *@* ]]; then
                fJumpUser=$(echo "$param" | cut -d@ -f1)
                fJumpServer=$(echo "$param" | cut -d@ -f2)

                # Extract the port if it exists
                # fJumpServer=172.18.20.84:2121
                param=$fJumpServer
                if [[ $param == *:* ]]; then
                    fJumpServer=$(echo "$param" | cut -d: -f1)
                    fJumpPort=$(echo "$param" | cut -d: -f2)
                fi
            fi
        else
            COLOR=$MAGENTA
            echo -e "$USER_NOTATION ${COLOR}Jump Server has to be in the format of user@jumpserver[:port]${RESET}"
            exit 1
        fi
    fi
}

preSet() {
    # If $fSwitchToSftp is set, disable $fvdom and $fSSHCmd
    if [ -n "$fSwitchToSftp" ]; then
        fVdom=""
        fSSHCmd=""
        fSSHNoShell=""
        fLiveCapture=""
    fi
    [ -n "$fSSHNoShell" ] && fVdom=""

    # If $fLiveCapture is set, check if $fSSHCmd contains "tcpdump". If not reset $fLiveCapture
    if [ -n "$fLiveCapture" ]; then
        if [[ ! $fSSHCmd == *"tcpdump"* ]]; then
            fLiveCapture=""
        fi
    fi

    # SSH Command
    cmd=$fSSHCmd
    if [ -z "$fSwitchToSftp" ]; then
        fSpawnCmd="ssh -p $fSSHPort $fSSHUser@$fSSHTarget"

        # Via a Jump Server
        if [ -n "$fNeedJumpServer" ]; then
            fSpawnCmd="$fSpawnCmd -J $fJumpUser@$fJumpServer:$fJumpPort"
        fi
        fLCBaseCmd="$fSpawnCmd \"$fSSHCmd\"" # For printing purpose only

        if [ -n "$fLiveCapture" ]; then
            cmd="$cmd | nc -l -p $fLiveCapturePort"
        fi

        fSpawnCmd="$fSpawnCmd \"$cmd\""
        # Keep the connection alive for login sessions
        if [ -z "$fSSHNoShell" ]; then
            fSpawnCmd="$fSpawnCmd \
                        -o ServerAliveInterval=$fServerAliveInterval \
                        -o ServerAliveCountMax=$fServerAliveCountMax"
        fi
    # SFTP command. SFTP does not support $fSSHCmd
    else
        fSpawnCmd="sftp -P $fSSHPort $fSSHUser@$fSSHTarget"
        if [ -n "$fNeedJumpServer" ]; then
            fSpawnCmd="$fSpawnCmd -o \"ProxyJump=$fJumpUser@$fJumpServer\""
        fi
    fi
    # Squash multiple spaces into one
    fSpawnCmd=$(echo "$fSpawnCmd" | tr -s ' ')
}

parseAndCheck
preSet

echo "$SEPARATOR" >&2
COLOR=$GREY
if [ -n "$fSwitchToSftp" ]; then
    echo -e "$USER_NOTATION ${COLOR}Switching to SFTP mode${RESET} ..." >&2
else
    echo -e "$USER_NOTATION ${COLOR}Working under SSH mode${RESET} ..." >&2
fi
COLOR="$RED"
echo -e "$USER_NOTATION [t] Set SSH Target Device to: ${COLOR}$fSSHTarget${RESET}" >&2
echo -e "$USER_NOTATION [l] Set SSH Username to: ${COLOR}$fSSHUser${RESET}" >&2
echo -e "$USER_NOTATION [p] Set SSH Password to: ${COLOR}$fSSHPwd${RESET}" >&2
echo -e "$USER_NOTATION [P] Set SSH Connection Port to: ${COLOR}$fSSHPort${RESET}" >&2
if [ -n "$fVdom" ]; then
    echo -e "$USER_NOTATION [v] Set FGT/FPX VDOM to: ${COLOR}$fVdom${RESET}" >&2
fi
echo -e "$USER_NOTATION [-] Set Maximum Attempts to: ${COLOR}$fMaxAttempts${RESET}" >&2
if [ -n "$fNeedJumpServer" ]; then
    echo "$SHORT_SEPARATOR" >&2
    echo -e "$USER_NOTATION [J] Set Jump Server to: ${COLOR}$fJumpServer${RESET}" >&2
    echo -e "$USER_NOTATION [-] Set Jump Username to: ${COLOR}$fJumpUser${RESET}" >&2
    echo -e "$USER_NOTATION [W] Set Jump Password to: ${COLOR}$fJumpPwd${RESET}" >&2
    echo -e "$USER_NOTATION [-] Set Jump Port to: ${COLOR}$fJumpPort${RESET}" >&2
    if [ -z "$fJumpServer" ] || [ -z "$fJumpUser" ]; then
        COLOR=$MAGENTA
        echo -e "$USER_NOTATION ${COLOR}Jump Server and its credentials are not set properly.${RESET}" >&2
        exit 1
    fi
    # echo "$SEPARATOR" >&2
fi
COLOR=$BLUE && echo -e "${COLOR}$fSpawnCmd${RESET}" >&2
if [ -n "$fLiveCapture" ]; then
    echo -e "${COLOR}nc $fSSHTarget $fLiveCapturePort${RESET}" >&2
    COLOR=$MAGENTA && echo -e "${COLOR}$fLCBaseCmd | wireshark -k -i -${RESET}" >&2
fi
echo "$SEPARATOR" >&2
COLOR=$GREY
echo -ne "$USER_NOTATION ${COLOR}Connecting to $fSSHTarget" >&2
if [ -n "$fNeedJumpServer" ]; then
    echo -ne " via Jump Server: $fJumpServer" >&2
fi
echo -e " ...${RESET}" >&2

# expect -d -c "
expect -c "
    # Define ANSI color codes with capitalized names
    # Full list can be found here: http://en.wikipedia.org/wiki/ANSI_escape_code
    # https://stackoverflow.com/questions/12879483/color-texts-at-expect-shell
    set RESET   \"\033\[0m\"
    set BOLD    \"\033\[1m\"
    set RED     \"\033\[31m\"
    set GREEN   \"\033\[32m\"
    set YELLOW  \"\033\[33m\"
    set BLUE    \"\033\[34m\"
    set MAGENTA \"\033\[35m\"
    set CYAN    \"\033\[36m\"
    set WHITE   \"\033\[37m\"

    if {\"$fSSHNoShell\" != \"\"} {
        set timeout -1
        trap {
            set COLOR \$MAGENTA
            puts stderr \"\n$USER_NOTATION \${COLOR}CTRL+C captured; Sending SIGINT to remote as well.\${RESET}\"
            send \"\x03\"
        } SIGINT
    } else {
        set timeout 5
    }

    set i 1
    set COLOR \$MAGENTA
    while {\$i <= $fMaxAttempts} {
        # ssh -o StrictHostKeyChecking=no $fSSHTarget
        if {\$i > 1} {
            puts \"$USER_NOTATION \${COLOR}Login attempt \$i/$fMaxAttempts\${RESET}\n\"
        }

        spawn -noecho $fSpawnCmd

        set ssh_pwd_prompt_cnt 0
        set jmp_pwd_prompt_cnt 0

        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {$fSSHUser@$fSSHTarget's (password|Password):} {
                incr ssh_pwd_prompt_cnt
                if {\$ssh_pwd_prompt_cnt > 1} {
                    puts stderr \"\n$USER_NOTATION \${COLOR}Login credentials for SSH Target: $fSSHTarget are wrong.\${RESET}\n\"
                    exit 1
                }
                send \"$fSSHPwd\r\"
                exp_continue
            }
            -re {$fJumpUser@$fJumpServer's (password|Password):} {
                incr jmp_pwd_prompt_cnt
                if {\$jmp_pwd_prompt_cnt > 1} {
                    puts stderr \"\n$USER_NOTATION \${COLOR}Login credentials for Jump Server: $fJumpServer are wrong.\${RESET}\n\"
                    exit 1
                }
                send \"$fJumpPwd\r\"
                exp_continue
            }
            {Address already in use} {
                puts stderr \"$USER_NOTATION \${COLOR}Port already in use. killall nc.\${RESET}\n\"
                exit 1
            }
            {Host key verification failed.} {
                puts stderr \"$USER_NOTATION \${COLOR}Host key verification failed. Updating known_hosts file ...\${RESET}\n\"
                system \"ssh-keygen -R $fSSHTarget\"
                puts stderr \"$USER_NOTATION \${COLOR}Host key removed from known_hosts file.\${RESET}\n\"
                incr i
                continue
            }
            {No route to host} {
                puts stderr \"$USER_NOTATION \${COLOR}No route to host.\${RESET}\n\"
                exit 1
            }
            -re {$fGroupPattern} {
                break
            }
            timeout {
                puts stderr \"$USER_NOTATION \${COLOR}Timed out waiting for a response.\${RESET}\n\"
                # close \$ssh_session_id
                incr i
                continue
            }
            eof {
                puts stderr \"$USER_NOTATION \${COLOR}Reached EOF. Program ended.\${RESET}\"
                exit 0
            }
        }
    }

    if {\$i > $fMaxAttempts} {
        puts stderr \"$USER_NOTATION Failed to connect to $fSSHTarget\n\"
        exit 1
    }

    if {\"$fSSHNoShell\" != \"\"} {
        expect eof {
            puts stderr \"$USER_NOTATION \${MAGENTA}Successfully executed the command remotely.\${RESET}\"
            exit 0
        }
    }

    puts -nonewline stderr \"$USER_NOTATION \${MAGENTA}Successfully connected to $fSSHTarget\${RESET}\"
    # flush stdout
    send \"\r\"

    # Check if VDOM is supported. VDOM is only supported on FGT/FPX
    if {\"$fVdom\" != \"\"} {
        set timeout 3
        expect {
            -re {$fDollarPattern} {
                puts -nonewline stderr \"$USER_NOTATION \${MAGENTA}VDOM is not supported on this device\${RESET}\"
                send \"\r\"
            }
            # Only for FGT/FPX
            -re {$fPoundPattern} {
                send \"config vdom\r\"
                expect {
                    -re {Command fail.|not found,} {
                        set COLOR \$BLUE
                        puts stderr \"\${COLOR}Error: VDOM is not supported on this device.\${RESET}\"
                        exit 1
                    }
                    -re {$fGroupPattern} {
                        send \"edit $fVdom\r\"
                    }
                }
            }
        }
        expect -re {$fGroupPattern}
    }

    proc handle_eof {} {
        global MAGENTA COLOR RESET
        set COLOR \$MAGENTA
        puts stderr \"$USER_NOTATION \${COLOR}Bye-bye.\${RESET}\"
        exit 1
    }

    if {\"$fSwitchToSftp\" != \"\"} {
        # \x04 is code for Ctrl-D. Only for SFTP
        interact {
            \x04 {
                handle_eof
            }
        }
    } else {
        interact
    }
"
