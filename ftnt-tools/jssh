#!/bin/bash

# SSH Port Forwarding
# -L [bind_address:]port:host:hostport
# -N Do not execute a remote command. This is useful for just forwarding ports.
# Topology:
# Local(127.0.0.1):8881 --- SSH Connect --- Jump Server(172.18.20.226):22 --- Forward Traffic --- Remote(10.40.1.101):22
# Usage:
# $ ssh -N -L Local_IP:Local_Port:Remote_IP:Remote_Port Jump_User@Jump_IP:Jump_Port
# Jump_User@Jump_IP's Passwd:
#
# Give an example:
# $ ssh -N -L 127.0.0.1:8881:10.40.1.101:22 test@172.18.20.226
# test@172.18.20.226's Passwd:
#
# $ netstat -tulnp | grep -i 8881
# tcp        0      0 127.0.0.1:8881          0.0.0.0:*               LISTEN      1208750/ssh
#
# and then
# $ ssh -l admin -p 8881 localhost
# or
# $ jssh -l admin -P 8881 -t localhost

# Shared Variables
# Match "$ ", "# " or "sftp> " at the end of the line
fGroupPattern='(\$|#|sftp>)\s*$' # For Literal Interpretation, use single quotes
fDollarPattern='\$\s*$'
fPoundPattern='#\s*$'
# fSftpPattern='sftp>\s*$'
fSwitchToSftp=""
fServerAliveInterval=30
fServerAliveCountMax=3
fMaxAttempts=2
# Live Capture
fLiveCapture=""
fLCPort="7777"
fLCInterface="any"
fLCBaseCmd=""
# SSH Variables
fTarget=""
fTargetUser="admin"
fTargetPwd="password"
fTargetPort=22
fVdom=""
fSSHCmd="" # The command to execute remotely without opening an interactive login session
fNoShell=""
fSpawnCmd=""
# Jump Server
fNeedJumpServer=""
fJumpOptions=""
fJumpServer=""
fJumpUser=""
fJumpPwd="password"
fJumpPort=22
# Local Forwarder
# -L [bind_address:]port:host:hostport
fNeedLocalForwarder=""
fLFOptions=""
fLFLocalAddr="127.0.0.1"
fLFLocalPort="8881"
# Constants
SCRIPT_NAME=$(basename "$0")
USER_NOTATION="@@@@"
SEPARATOR_LEFT="<---------------------------------------------------"
SEPARATOR_RIGHT="--------------------------------------------------->"
# Colors
RED='\033[31m'
LIGHTRED='\033[91m'
MAGENTA='\033[35m'
CYAN='\033[36m'
BLACK='\033[30m'
PURPLE='\033[35m'
YELLOW='\033[33m'
LIGHTYELLOW='\033[93m'
GREEN='\033[32m'
LIGHTGREEN='\033[92m'
GREY='\033[90m'
BLUE='\033[34m'
LIGHTBLUE='\033[94m'
BACKGROUNDBLACK='\033[40m'
PURPLE='\033[35m'
LIGHTPURPLE='\033[95m'
NORMAL='\033[0m'
BOLD='\033[1m'
RESET='\033[0m'

usage() {
cat << _EOF
$SCRIPT_NAME 1.0

usage:
    $SCRIPT_NAME [-l/-u user] [-p passwd] [-P ssh_port] [-v vdom] [-F] [-h] -t [user@]target[:port]
         [-c command] [-C]
         [-J user@jumpserver[:port]] [-W jump_passwd]
         [-L [local_bind_address:]local_port:remote_address:remoteport]

    Default to SSH, use -F to switch to SFTP

Options:
    -t     Target        The device to connect to. Default is "$fTarget"
    -l/-u  Username      Username for login. Default is "$fTargetUser"
    -p     Password      Password for login. Default is "$fTargetPwd"
    -P     Port          SSH Port to connect to. Default is "$fTargetPort"
    -v     Vdom          Specify the VDOM. Default is "$fVdom"
    -c     Command       Execute commands remotely without opening an interactive login session
    -C     Capture       Live capture packets from the remote device
    -L     Forwarder     Local Forwarder. Format: [local_bind_address:]local_port:remote_address:remoteport
    -J     Jump Server   The jump server to connect to. Format: user@jumpserver[:port]
    -W     Jump Passwd   Password for jump server. Default is "$fJumpPwd"
    -F     SFTP          Switch to SFTP
    -h     Help          Print this help message

Example:
    # SSH Connection
    $SCRIPT_NAME -t fpx1
    $SCRIPT_NAME -t 172.18.20.214 -l admin -p 1
    # SSH with a Jump Server
    $SCRIPT_NAME -J fpxauto@172.18.20.84:22 -t guodong@10.120.1.111 -P 2121 -p 123 -W qaz
    # SFTP Connection
    $SCRIPT_NAME -t 172.18.29.111 -l test -p test -F
    # SFTP with a Jump Server
    $SCRIPT_NAME -J fpxauto@172.18.20.84:22 -t guodong@10.120.1.111 -P 2121 -p 123 -W qaz -F
    # Remote Live Capture
    $SCRIPT_NAME -t 172.18.29.111 -l test -p test -c "tcpdump -i any -s 0 -U -n -w - 'not port 22'" -C
    # Local Port Forwarding
    $SCRIPT_NAME -L 127.0.0.1:8881:10.40.1.101:22 -J test@172.18.20.226 -W test

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "t:l:u:p:P:J:W:v:c:FCL:h" opt; do
    case ${opt} in
        t)
            fTarget=$OPTARG
            ;;
        l) # User
            fTargetUser=$OPTARG
            ;;
        u) # User
            fTargetUser=$OPTARG
            ;;
        p)
            fTargetPwd=$OPTARG
            ;;
        P)
            fTargetPort=$OPTARG
            ;;
        c)
            COLOR=$MAGENTA
            fSSHCmd=$OPTARG
            if [ -n "$fSSHCmd" ]; then
                # Only set this flag when $fSSHCmd is not empty
                fNoShell=true
            fi
            ;;
        C)
            fLiveCapture=true
            ;;
        L)
            fNeedLocalForwarder=true
            fLFOptions=$OPTARG
            ;;
        J)
            fNeedJumpServer=true
            fJumpOptions=$OPTARG
            ;;
        W)
            fJumpPwd=$OPTARG
            ;;
        v)
            fVdom=$OPTARG
            ;;
        F)
            fSwitchToSftp=true
            ;;
        h)
            usage
            ;;
        ?)
            COLOR=$MAGENTA
            echo -e "${COLOR}Error: Invalid option: -$OPTARG${RESET}" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $param, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    COLOR=$MAGENTA
    echo -e "${COLOR}Error: Illegal non-option arguments: $@${RESET}"
    exit
fi

parseOptions() {
    # Parse fJumpOptions in the format of user@jumpserver[:port]
    if [ "$fNeedJumpServer" = true ]; then
        # Exp: -J auto@172.18.20.84:2121 or -J auto@172.18.20.84
        pattern='^([a-zA-Z0-9._%+-]+)@(([0-9]{1,3}\.){3}[0-9]{1,3})(:([0-9]+))?$'
        fJumpOptions=$(echo "$fJumpOptions" | xargs)
        param=$fJumpOptions
        if [[ $param =~ $pattern ]]; then
            fJumpUser="${BASH_REMATCH[1]}"
            fJumpServer="${BASH_REMATCH[2]}"
            [ -n "${BASH_REMATCH[5]}" ] && fJumpPort="${BASH_REMATCH[5]}"
        else
            COLOR=$MAGENTA
            echo -e "$USER_NOTATION ${COLOR}-J has to be in the format of user@jumpserver[:port]${RESET}"
            exit 1
        fi

        # # Print the BASH_REMATCH array
        # for i in "${!BASH_REMATCH[@]}"; do
        #     echo -e "$USER_NOTATION ${COLOR}BASH_REMATCH[$i]: ${BASH_REMATCH[$i]}${RESET}"
        # done
    fi

    # Parse $fLFOptions in the format of [bind_address:]port:host:hostport
    # Exp: -L 127.0.0.1:8881:10.40.1.101:22 or -L 8881:10.40.1.101:22
    if [ -n "$fNeedLocalForwarder" ]; then
        pattern='^((([0-9]{1,3}\.){3}[0-9]{1,3}):)?([0-9]+):(([0-9]{1,3}\.){3}[0-9]{1,3}):([0-9]+)$'
        fLFOptions=$(echo "$fLFOptions" | xargs)
        param=$fLFOptions
        if [[ $param =~ $pattern ]]; then
            # BASH_REMATCH[0]: Contains the entire matched string.
            # BASH_REMATCH[1], BASH_REMATCH[2], etc.: Contain the results of any capturing groups in the regex.
            [ -n "${BASH_REMATCH[2]}" ] && fLFLocalAddr="${BASH_REMATCH[2]}"
            fLFLocalPort="${BASH_REMATCH[4]}"
            fTarget="${BASH_REMATCH[5]}"
            fTargetPort="${BASH_REMATCH[7]}"
        else
            COLOR=$MAGENTA
            echo -e "$USER_NOTATION ${COLOR}-L has to be in the format of [bind_address:]port:host:hostport${RESET}"
            exit 1
        fi

        # # Print the BASH_REMATCH array
        # for i in "${!BASH_REMATCH[@]}"; do
        #     echo -e "$USER_NOTATION ${COLOR}BASH_REMATCH[$i]: ${BASH_REMATCH[$i]}${RESET}"
        # done
        return
    fi

    # Parse fTarget in the format of [user@]sshtarget[:port]
    # Exp: -t auto@172.18.20.84 or -t 172.18.20.84
    pattern='^(([a-zA-Z0-9._%+-]+)@)?([a-zA-Z0-9._%+-]+)(:([0-9]+))?$'
    fTarget=$(echo "$fTarget" | xargs)
    param=$fTarget
    if [[ $fTarget =~ $pattern ]]; then
        [ -n "${BASH_REMATCH[2]}" ] && fTargetUser="${BASH_REMATCH[2]}"
        fTarget="${BASH_REMATCH[3]}"
        [ -n "${BASH_REMATCH[5]}" ] && fTargetPort="${BASH_REMATCH[5]}"
    else
        COLOR=$MAGENTA
        echo -e "$USER_NOTATION ${COLOR}Target has to be set and in the format of [user@]sshtarget${RESET}"
        exit 1
    fi

    # # Print the BASH_REMATCH array
    # for i in "${!BASH_REMATCH[@]}"; do
    #     echo -e "$USER_NOTATION ${COLOR}BASH_REMATCH[$i]: ${BASH_REMATCH[$i]}${RESET}"
    # done
}

checkSanity() {
    if [ -z "$fTarget" ]; then
        COLOR=$MAGENTA
        echo -e "$USER_NOTATION ${COLOR}Target is not set.${RESET}"
        exit 1
    fi

    if [ -n "$fNeedLocalForwarder" ]; then
        if [ -z "$fNeedJumpServer" ]; then
            COLOR=$MAGENTA
            echo -e "$USER_NOTATION ${COLOR}Local Forwarder requires a Jump Server to be set as well.${RESET}"
            exit 1
        fi
        fVdom=""
        fSSHCmd=""
        fNoShell=""
        fLiveCapture=""
    fi

    if [ -n "$fSwitchToSftp" ]; then
        fVdom=""
        fSSHCmd=""
        fNoShell=""
        fLiveCapture=""
    fi

    [ -n "$fNoShell" ] && fVdom=""

    # If $fLiveCapture is set, check if $fSSHCmd contains "tcpdump". If not reset $fLiveCapture
    if [ -n "$fLiveCapture" ]; then
        if [[ ! $fSSHCmd == *"tcpdump"* ]]; then
            fLiveCapture=""
        fi
    fi
}

setSpawnCmd() {
    keepAlive="-o ServerAliveInterval=$fServerAliveInterval -o ServerAliveCountMax=$fServerAliveCountMax"

    # Local Port Forwarding
    if [ -n "$fNeedLocalForwarder" ]; then
        fSpawnCmd="ssh -N -L $fLFLocalAddr:$fLFLocalPort:$fTarget:$fTargetPort $fJumpUser@$fJumpServer"
        fSpawnCmd="$fSpawnCmd $keepAlive"
        return
    fi

    # SSH Command
    if [ -z "$fSwitchToSftp" ]; then
        cmd=$fSSHCmd
        fSpawnCmd="ssh -p $fTargetPort -l $fTargetUser $fTarget"

        # Via a Jump Server
        if [ -n "$fNeedJumpServer" ]; then
            fSpawnCmd="$fSpawnCmd -J $fJumpUser@$fJumpServer:$fJumpPort"
        fi
        fLCBaseCmd="$fSpawnCmd \"$fSSHCmd\"" # For printing purpose only

        if [ -n "$fLiveCapture" ]; then
            cmd="$cmd | nc -l -p $fLCPort"
        fi

        if [ -n "$fNoShell" ]; then
            fSpawnCmd="$fSpawnCmd \"$cmd\""
        else
            fSpawnCmd="$fSpawnCmd $keepAlive"
        fi
    # SFTP command. SFTP does not support $fSSHCmd
    else
        if [ -n "$fNeedJumpServer" ]; then
            cmd="-o \"ProxyJump=$fJumpUser@$fJumpServer\""
        fi
        fSpawnCmd="sftp $cmd -P $fTargetPort $fTargetUser@$fTarget"
    fi
    # Squash multiple spaces into one
    fSpawnCmd=$(echo "$fSpawnCmd" | tr -s ' ')
}

parseOptions
checkSanity
setSpawnCmd

echo "$SEPARATOR_RIGHT" >&2
if [ -n "$fNeedLocalForwarder" ]; then
    COLOR=$LIGHTRED
    echo -e "${BOLD}Local Forwarder Options:${RESET}" >&2
    echo -e "[-] Set Local Bind Address to: ${COLOR}$fLFLocalAddr${RESET}" >&2
    echo -e "[-] Set Local Bind Port to: ${COLOR}$fLFLocalPort${RESET}" >&2
    echo -e "[L] Set Local Forwarder: ${COLOR}$fLFLocalAddr:$fLFLocalPort -> $fTarget:$fTargetPort${RESET}" >&2
else
    echo -e "${BOLD}Target Options:${RESET}" >&2
    COLOR=$LIGHTRED
    echo -e "[t] Set SSH Target Device to: ${COLOR}$fTarget${RESET}" >&2
    echo -e "[l] Set SSH Username to: ${COLOR}$fTargetUser${RESET}" >&2
    echo -e "[p] Set SSH Password to: ${COLOR}$fTargetPwd${RESET}" >&2
    echo -e "[P] Set SSH Connection Port to: ${COLOR}$fTargetPort${RESET}" >&2
    if [ -n "$fVdom" ]; then
        echo -e "[v] Set FGT/FPX VDOM to: ${COLOR}$fVdom${RESET}" >&2
    fi
    echo -e "[-] Set Maximum Attempts to: ${COLOR}$fMaxAttempts${RESET}" >&2
fi

if [ -n "$fNeedJumpServer" ]; then
    echo -e "${BOLD}Jump Server Options:${RESET}" >&2
    echo -e "[J] Set Jump Server to: ${COLOR}$fJumpServer${RESET}" >&2
    echo -e "[-] Set Jump Username to: ${COLOR}$fJumpUser${RESET}" >&2
    echo -e "[W] Set Jump Password to: ${COLOR}$fJumpPwd${RESET}" >&2
    echo -e "[-] Set Jump Port to: ${COLOR}$fJumpPort${RESET}" >&2
    if [ -z "$fJumpServer" ] || [ -z "$fJumpUser" ]; then
        COLOR=$MAGENTA
        echo -e "${COLOR}Jump Server and its credentials are not set properly.${RESET}" >&2
        exit 1
    fi
fi

[ -n "$fLiveCapture" ] && echo -e "[C] nc Listens remotely on Port: ${COLOR}$fLCPort${RESET}" >&2

COLOR=$LIGHTYELLOW
echo -e "${BOLD}Spawned Command:${RESET}" >&2
echo -e "${COLOR}$fSpawnCmd${RESET}" >&2

dumpLFTips() {
    # Local Forwarding only works when $fNeedJumpServer is set
    COLOR=$1
    echo -e "${BOLD}Local Forwarding Command Tips:${RESET}" >&2
    echo -e "${COLOR}${SCRIPT_NAME} -L $fLFLocalAddr:$fLFLocalPort:$fTarget:$fTargetPort -J $fJumpOptions -W $fJumpPwd${RESET}" >&2
    echo -e "${COLOR}${SCRIPT_NAME} -t $fLFLocalAddr:$fLFLocalPort -l $fTargetUser -p $fTargetPwd${RESET}" >&2
}

dumpLCTips() {
    COLOR=$1
    echo -e "${BOLD}Live Capture Command Tips:${RESET}" >&2
    cmd="tcpdump -i $fLCInterface -s 0 -U -n -w - 'not port 22'"
    if [ -n "$fNeedJumpServer" ]; then
        if [ -n "$fLiveCapture" ]; then
            echo -e "${COLOR}nc $fLFLocalAddr $fLCPort | wireshark -k -${RESET}" >&2
            echo -e "${COLOR}$fLCBaseCmd | wireshark -k -i -${RESET}" >&2
        else
            echo -e "${COLOR}${SCRIPT_NAME} -J $fJumpOptions -W $fJumpPwd -t $fTargetUser@$fTarget:$fTargetPort -p $fTargetPwd -c \"$cmd\" -C${RESET}" >&2
        fi
    else
        if [ -n "$fLiveCapture" ]; then
            echo -e "${COLOR}nc $fTarget $fLCPort | wireshark -k -i -${RESET}" >&2
            echo -e "${COLOR}$fLCBaseCmd | wireshark -k -i -${RESET}" >&2
        else
            echo -e "${COLOR}${SCRIPT_NAME} -t $fTargetUser@$fTarget:$fTargetPort -p $fTargetPwd -c \"$cmd\" -C${RESET}" >&2
        fi
    fi
}

dumpLCTips "$BLUE"
[ -n "$fNeedJumpServer" ] && dumpLFTips "$LIGHTGREEN"

echo "$SEPARATOR_LEFT" >&2
if [ -n "$fNeedLocalForwarder" ]; then
    COLOR=$GREY
    echo -ne "${COLOR}Connecting to Jump Server: $fJumpServer to set up the Local Forwarder${RESET}" >&2
else
    COLOR=$GREY
    echo -ne "${COLOR}Connecting to $fTarget" >&2
    if [ -n "$fNeedJumpServer" ]; then
        echo -ne " via Jump Server: $fJumpServer" >&2
    fi
fi
echo -e " ...${RESET}" >&2

# expect -d -c "
expect -c "
    # Define ANSI color codes with capitalized names
    # Full list can be found here: http://en.wikipedia.org/wiki/ANSI_escape_code
    # https://stackoverflow.com/questions/12879483/color-texts-at-expect-shell
    set RESET       \"\033\[0m\"
    set BOLD        \"\033\[1m\"
    set RED         \"\033\[31m\"
    set GREEN       \"\033\[32m\"
    set LIGHTGREEN  \"\033\[92m\"
    set YELLOW      \"\033\[33m\"
    set LIGHTYELLOW \"\033\[93m\"
    set BLUE        \"\033\[34m\"
    set MAGENTA     \"\033\[35m\"
    set CYAN        \"\033\[36m\"
    set GREY        \"\033\[90m\"

    # Clear all nc sessions on the remote. Proc has optional argument with a default value
    proc clear_unfinished_jobs {{err_msg \"\"}} {
        global LIGHTYELLOW MAGENTA RESET
        # Var defined here is in local scope
        set COLOR \$LIGHTYELLOW
        if {\$err_msg != \"\"} {
            puts stderr \"$USER_NOTATION \${COLOR}Error: \$err_msg\${RESET}\"
        }
        set remote_cmd {killall nc; killall tcpdump}
        if {\"$fLiveCapture\" != \"\"} {
            puts stderr \"$USER_NOTATION \${COLOR}Sending commands to clear all nc session on the remote.\n\${RESET}\"
            if {\"$fNeedJumpServer\" != \"\"} {
                system $SCRIPT_NAME -t $fTargetUser@$fTarget:$fTargetPort -p $fTargetPwd -J $fJumpOptions -W $fJumpPwd -c '\$remote_cmd'
            } else {
                system $SCRIPT_NAME -t $fTargetUser@$fTarget:$fTargetPort -p $fTargetPwd -c '\$remote_cmd'
            }
        }
    }

    proc check_tcpdump_permission {{error_msg \"\"}} {
        global LIGHTYELLOW MAGENTA RESET
        set COLOR \$LIGHTYELLOW
        set remote_cmd {ls -l \`command -v tcpdump\`}
        # set remote_cmd {stat -c '%a' \`which tcpdump\`}
        puts stderr \"$USER_NOTATION \${COLOR}Checking tcpdump permission on the remote.\n\${RESET}\"
        if {\"$fNeedJumpServer\" != \"\"} {
            system $SCRIPT_NAME -t $fTargetUser@$fTarget:$fTargetPort -p $fTargetPwd -J $fJumpOptions -W $fJumpPwd -c '\$remote_cmd'
        } else {
            system $SCRIPT_NAME -t $fTargetUser@$fTarget:$fTargetPort -p $fTargetPwd -c '\$remote_cmd'
        }
    }

    if {\"$fNoShell\" != \"\" || \"$fNeedLocalForwarder\" != \"\"} {
        set timeout -1
        trap {
            set COLOR \$LIGHTYELLOW
            if {\"$fLiveCapture\" != \"\"} {
                puts stderr \"\n$USER_NOTATION \${COLOR}CTRL+C captured.\${RESET}\"
                clear_unfinished_jobs
            } else {
                puts stderr \"\n$USER_NOTATION \${COLOR}CTRL+C captured; Sending SIGINT to remote as well.\${RESET}\"
                send \"\x03\"
            }
            set COLOR \$MAGENTA
        } SIGINT
    } else {
        set timeout 5
    }

    set i 1
    set COLOR \$MAGENTA
    while {\$i <= $fMaxAttempts} {
        # ssh -o StrictHostKeyChecking=no $fTarget
        if {\$i > 1} {
            puts -nonewline stderr \"$USER_NOTATION \${COLOR}Login attempt \$i/$fMaxAttempts\${RESET}\n\"
        }

        spawn -noecho $fSpawnCmd
        set session_id [exp_pid]
        puts stderr \"${USER_NOTATION} \${COLOR}Spawned Session ID: \$session_id\${RESET}\"

        set ssh_pwd_prompt_cnt 0
        set jmp_pwd_prompt_cnt 0

        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {$fTargetUser@$fTarget's (password|Password):} {
                incr ssh_pwd_prompt_cnt
                if {\$ssh_pwd_prompt_cnt > 1} {
                    puts stderr \"\n$USER_NOTATION \${COLOR}Login credentials for SSH Target: $fTarget are wrong.\${RESET}\n\"
                    exit 1
                }
                send \"$fTargetPwd\r\"
                exp_continue
            }
            -re {$fJumpUser@$fJumpServer's (password|Password):} {
                incr jmp_pwd_prompt_cnt
                if {\$jmp_pwd_prompt_cnt > 1} {
                    puts stderr \"\n$USER_NOTATION \${COLOR}Login credentials for Jump Server: $fJumpServer are wrong.\${RESET}\n\"
                    exit 1
                }
                send \"$fJumpPwd\r\"
                exp_continue
            }
            -re {host key for (.+?) has changed} {
                # Get the matched variable from the first capturing group
                set host \$expect_out(1,string)
                set COLOR \$LIGHTYELLOW
                puts -nonewline stderr \"$USER_NOTATION \${COLOR}Host key verification failed. Updating known_hosts file\${RESET}\n\"
                system \"ssh-keygen -R \$host\"
                puts stderr \"$USER_NOTATION \${COLOR}Host key removed from known_hosts file.\${RESET}\n\"
                set COLOR \$MAGENTA
                incr i
                continue
            }
            -re {tcpdump: syntax error|You don't have permission to capture on that device} {
                set error_msg \$expect_out(0,string)
                clear_unfinished_jobs \$error_msg

                if {[string match "*permission*" \$error_msg]} {
                    check_tcpdump_permission
                    set COLOR \$LIGHTYELLOW
                    # print, suggest to set the set uid bit
                    puts stderr \"$USER_NOTATION \${COLOR}Suggest to set the setuid bit for tcpdump.\${RESET}\"
                    puts stderr \"$USER_NOTATION \${COLOR}sudo chmod u+s /usr/sbin/tcpdump\${RESET}\"
                    set COLOR \$MAGENTA
                }
                exp_continue
            }
            {No route to host} {
                puts stderr \"$USER_NOTATION \${COLOR}No route to host.\${RESET}\n\"
                exit 1
            }
            -re {$fGroupPattern} {
                break
            }
            timeout {
                puts stderr \"$USER_NOTATION \${COLOR}Session \$session_id Timed out waiting for a response.\${RESET}\n\"
                # close \$ssh_session_id
                incr i
                continue
            }
            eof {
                puts stderr \"$USER_NOTATION \${COLOR}Session \$session_id Reached EOF. Program ended.\${RESET}\"
                exit 0
            }
        }
    }

    if {\$i > $fMaxAttempts} {
        puts stderr \"$USER_NOTATION \${COLOR}Failed to connect to $fTarget\${RESET}\"
        exit 1
    }

    if {\"$fNoShell\" != \"\"} {
        expect eof {
            puts stderr \"\n$USER_NOTATION \${COLOR}Session \$session_id executed commands successfully.\${RESET}\"
            exit 0
        }
    }

    # Check if VDOM is supported. VDOM is only supported on FGT/FPX
    if {\"$fVdom\" != \"\"} {
        set timeout 3
        send \"\r\"
        expect {
            -re {$fDollarPattern} {
                puts -nonewline stderr \"$USER_NOTATION \${MAGENTA}VDOM is not supported on this device\${RESET}\"
                send \"\r\"
            }
            # Only for FGT/FPX
            -re {$fPoundPattern} {
                send \"config vdom\r\"
                expect {
                    -re {Command fail.|not found,} {
                        set COLOR \$BLUE
                        puts stderr \"\n\${COLOR}Error: VDOM is not supported on this device.\${RESET}\"
                        exit 1
                    }
                    -re {$fGroupPattern} {
                        send \"edit $fVdom\r\"
                    }
                }
            }
        }
        expect -re {$fGroupPattern}
    }

    proc handle_eof {} {
        global MAGENTA COLOR RESET
        set COLOR \$MAGENTA
        puts stderr \"$USER_NOTATION \${COLOR}Bye-bye.\${RESET}\"
        exit 1
    }

    if {\"$fSwitchToSftp\" != \"\"} {
        # \x04 is code for Ctrl-D. Only for SFTP
        interact {
            \x04 {
                handle_eof
            }
        }
    } else {
        interact
    }
"
