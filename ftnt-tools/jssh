#!/bin/bash

# SSH Local Forwarding
# -L [bind_address:]port:host:hostport
# -N Do not execute a remote command. This is useful for just forwarding ports.
# Topology: Local(127.0.0.1) -> Jump server(172.18.20.226) -> Remote(10.40.1.101)
# $ ssh -N -L 127.0.0.1:8888:10.40.1.101:22 test@172.18.20.226
# test@172.18.20.226's password:
#
# $ netstat -tulnp | grep -i 8888
# tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      1208750/ssh
#
# and then
# $ ssh -l admin -p 8888 localhost
# or use
# $ jssh -t localhost -P 8888

# Variables
scriptName=$(basename $0)
sshPort=22
loginUser="admin"
password="password"
fgtExpectRoot="# "
fgtExpectUser="$ "
fgtExpect=$fgtExpectUser
fgtTarget="fgt1"
maxAttempts=2
# Print Pretty
userNotation="@@@@"
separator="----------------------------------------------------------------"

usage() {
cat << _EOF
jssh 0.0

usage:
    $scriptName [-P sshPort] [-u user] [-p password] [-E fgtExpect] -t fgtTarget/fgtIP

Options:
    -P sshPort         SSH port to use. Default is "$sshPort"
    -u user             User to use for login. Default is "$loginUser"
    -p password         Password to use for login. Default is "$password"
    -E fgtExpect       Except prompt to expect(other than "$fgtExpectRoot"). Default is "$fgtExpectUser".
    -t fgtTarget/fgtIP  The device to connect to. Default is "$fgtTarget"

Example:
    $scriptName -t fpx1
    $scriptName -u admin -p 123 -t fgt1 -p 22
    $scriptName -u admin -p 123 -t 172.16.67.181

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "p:u:t:P:E:h" opt; do
    case ${opt} in
        p)
            password=$OPTARG
            ;;
        u)
            loginUser=$OPTARG
            ;;
        t)
            fgtTarget=$OPTARG
            ;;
        E)
            fgtExpect=$OPTARG
            ;;
        P)
            sshPort=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "$userNotation Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$userNotation Illegal non-option arguments: $@"
    exit
fi

echo $separator
echo "$userNotation Set Target Device to: $fgtTarget"
echo "$userNotation Set SSH Connection Port to: $sshPort"
echo "$userNotation Set Username to: $loginUser"
echo "$userNotation Set Password to: $password"
echo "$userNotation Set Maximum Attempts to: $maxAttempts"
echo "$userNotation Connecting to $fgtTarget..."
echo $separator

# expect -d -c "
expect -c "
    set timeout 5
    for {set i 1} {\$i <= $maxAttempts} {incr i} {
        # ssh -o StrictHostKeyChecking=no $fgtTarget
        # send_user \"Sync attempt \$i/$maxAttempts\n\"
        spawn -noecho ssh -p $sshPort $loginUser@$fgtTarget

        set process_id \$spawn_id
        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                send \"$password\r\"
                exp_continue
            }
            \"Host key verification failed.\" {
                send_user \"$userNotation Host key verification failed. Updating known_hosts file...\n\"
                system \"ssh-keygen -R $fgtTarget\"
                send_user \"$userNotation Host key removed from known_hosts file.\n\"
                send_user \"$userNotation Retrying SSH immediately...\n\"
                continue
            }
            \"Permission denied\" {
                send_user \"$userNotation Permission denied. Have you specified the login credentials?\n\"
                exit 1
            }
            \"Connection refused\" {
                send_user \"$userNotation Connection refused. Action aborted.\n\"
                exit 1
            }
            \"$fgtExpectRoot\" {
                break
            }
            \"$fgtExpect\" {
                break
            }
            timeout {
                send_user \"$userNotation Timed out waiting for a response.\n\"
                close \$process_id
                incr i
                continue
            }
            eof {
                send_user \"$userNotation Reached EOF. Program ended.\n\"
                exit 1
            }
        }
    }

    if {\$i == $maxAttempts} {
        send_user \"$userNotation Failed to connect to $fgtTarget\"
        exit 1
    }

    send_user \"$userNotation Successfully connected to $fgtTarget.\"
    send \"\r\"
    # Interact with the device
    interact
"

# + expect -d -c '
#     for {set i 1} {$i <= 2} {incr i} {
#         # ssh -o StrictHostKeyChecking=no 172.18.20.230
#         # send_user "Sync attempt $i/2\n"
#         spawn -noecho ssh admin@172.18.20.230

#         expect {
#             {yes/no} {
#                 send "yes\r"
#                 exp_continue
#             }
#             -re {[Pp]assword} {
#                 send "\r"
#                 exp_continue
#             }
#             "Host key verification failed." {
#                 send_user "@@@@ Host key verification failed. Updating known_hosts file...\n"
#                 system "ssh-keygen -R 172.18.20.230"
#                 send_user "@@@@ Host key removed from known_hosts file.\n"
#                 send_user "@@@@ Retrying SSH immediately...\n"
#                 continue
#             }
#             "Connection refused" {
#                 send_user "@@@@ Connection refused. Exiting...\n"
#                 exit 1
#             }
#             eof {
#                 puts "Reached EOF. Exiting..."
#                 exit 1
#             }
#             timeout {
#                 puts "Timed out waiting for a response."
#                 exit 1
#             }
#             "# " {
#                 puts "@@@@ Successfully connected to 172.18.20.230"
#                 break
#             }
#         }
#     }

#     send "\r"
#     expect "# "

#     # Now you can add additional commands or interactions as needed
#     # For example, you can automate further commands here

#     # Interact with the device
#     interact
# '
