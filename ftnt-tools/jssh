#!/bin/bash

# SSH Port Forwarding
# -L [bind_address:]port:host:hostport
# -N Do not execute a remote command. This is useful for just forwarding ports.
# Topology:
# Local(127.0.0.1):8881 --- SSH Connect --- Jump Server(172.18.20.226):22 --- Forward Traffic --- Remote(10.40.1.101):22
# Usage:
# $ ssh -N -L Local_IP:Local_Port:Remote_IP:Remote_Port Jump_User@Jump_IP:Jump_Port
# Jump_User@Jump_IP's Passwd:
#
# Give an example:
# $ ssh -N -L 127.0.0.1:8881:10.40.1.101:22 test@172.18.20.226
# test@172.18.20.226's Passwd:
#
# $ netstat -tulnp | grep -i 8881
# tcp        0      0 127.0.0.1:8881          0.0.0.0:*               LISTEN      1208750/ssh
#
# and then
# $ ssh -l admin -p 8881 localhost
# or use
# $ jssh -l admin -P 8881 -t localhost

# Variables
scriptName=$(basename $0)
fSSHTarget="fgt1"
fSSHUser="admin"
fSSHPwd="password"
fSSHPort=22
fVdom=""
fExpectRoot="# "
fExpectUser="$ "
fSSHCmd=""
fJumpServer=""
fJumpUser=""
fJumpPwd=""
fJumpPort=22
fWithJumpServer=false
fMaxAttempts=2
fServerAliveInterval=30
fServerAliveCountMax=3
# Print Pretty
USER_NOTATION="@@@@"
SEPARATOR="---------------------------------------------------"
SHORT_SEPARATOR="--------------------------------------"

usage() {
cat << _EOF
$scriptName 0.1

usage:
    $scriptName [-l/-u user] [-p passwd] [-P ssh_port]
         [-J jump_server] [-j jump_passwd] [-ju jump_user] [-jP jump_port]
         [-e expect] [-v vdom] -t target_ip

Options:
    -t     target       The device to connect to. Default is "$fSSHTarget"
    -l/-u  username     Username for login. Default is "$fSSHUser"
    -p     password     Password for login. Default is "$fSSHPwd"
    -P     Port         SSH Port to connect to. Default is "$fSSHPort"
    -J     Jump Server  The jump server to connect to. Format: user@jumpserver[:port]
    -j     Jump Passwd  Password for jump server. Default is "$fJumpPwd"
    -e     Expect       Promption to expect(Other than "$fExpectRoot" and "$fExpectUser").
    -v     vdom         Specify the VDOM. Default is "$fVdom"
    -h     Help         Print this help message

Example:
    $scriptName -t fpx1
    $scriptName -t 172.16.67.181 -l admin -p "FGT\!123"
    $scriptName -t 172.16.67.181 -l admin -p "FGT\!123" -P 8822 -v root
    # Use a Jump Server
    $scriptName -J auto@172.18.20.84:8022 -j qaz -t test@10.120.1.111 -P 2121 -p 123

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "t:l:u:p:P:J:j:e:v:h" opt; do
    case ${opt} in
        t)
            fSSHTarget=$OPTARG
            ;;
        l) # User
            fSSHUser=$OPTARG
            ;;
        u) # User
            fSSHUser=$OPTARG
            ;;
        p)
            fSSHPwd=$OPTARG
            ;;
        P)
            fSSHPort=$OPTARG
            ;;
        J)
            fWithJumpServer=true
            fJumpServer=$OPTARG
            ;;
        j)
            fJumpPwd=$OPTARG
            ;;
        e)
            fExpectUser=$OPTARG
            ;;
        v)
            fVdom=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "$USER_NOTATION Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $param, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$USER_NOTATION Illegal non-option arguments: $@"
    exit
fi

# Define color and formatting variables
RED='\033[31m'
MAGENTA='\033[35m'
GREEN='\033[32m'
BLUE='\033[34m'
RESET='\033[0m'

parseAndCheck() {
    # Check if the target is in the format of user@target
    param=$fSSHTarget
    if [[ $fSSHTarget == *@* ]]; then
        fSSHUser=$(echo "$param" | cut -d@ -f1)
        fSSHTarget=$(echo "$param" | cut -d@ -f2)
    fi

    # Check if the jump server is in the format of user@jumpserver:port
    if [ "$fWithJumpServer" = true ]; then
        # Exp: fJumpServer=auto@172.18.20.84:2121
        param=$fJumpServer
        if [[ $fJumpServer == *@* ]]; then
            if [[ $param == *@* ]]; then
                fJumpUser=$(echo "$param" | cut -d@ -f1)
                fJumpServer=$(echo "$param" | cut -d@ -f2)

                # Extract the port if it exists
                # fJumpServer=172.18.20.84:2121
                param=$fJumpServer
                if [[ $fJumpServer == *:* ]]; then
                    fJumpServer=$(echo "$param" | cut -d: -f1)
                    fJumpPort=$(echo "$param" | cut -d: -f2)
                fi
            fi
        fi

        if [ -z "$fJumpServer" ] || [ -z "$fJumpUser" ] || [ -z "$fJumpPwd" ]; then
            COLOR=$MAGENTA
            echo -e "$USER_NOTATION ${COLOR}Jump Server and its credentials are not set properly.${RESET}"
            exit 1
        fi
    fi

}
parseAndCheck

COLOR="$RED"
echo "$SEPARATOR"
echo -e "$USER_NOTATION Set SSH Target Device to: ${COLOR}$fSSHTarget${RESET}"
echo -e "$USER_NOTATION Set SSH Username to: ${COLOR}$fSSHUser${RESET}"
echo -e "$USER_NOTATION Set SSH Password to: ${COLOR}$fSSHPwd${RESET}"
echo -e "$USER_NOTATION Set SSH Connection Port to: ${COLOR}$fSSHPort${RESET}"
echo -e "$USER_NOTATION Set Maximum Attempts to: ${COLOR}$fMaxAttempts${RESET}"
if [ "$fWithJumpServer" = true ]; then
    echo $SHORT_SEPARATOR
    echo -e "$USER_NOTATION Set Jump Server to: ${COLOR}$fJumpServer${RESET}"
    echo -e "$USER_NOTATION Set Jump Username to: ${COLOR}$fJumpUser${RESET}"
    echo -e "$USER_NOTATION Set Jump Password to: ${COLOR}$fJumpPwd${RESET}"
    echo -e "$USER_NOTATION Set Jump Port to: ${COLOR}$fJumpPort${RESET}"
    # echo "$SEPARATOR"
fi
echo -n "$USER_NOTATION Connecting to $fSSHTarget"
if [ "$fWithJumpServer" = true ]; then
    echo -ne " via Jump Server: $fJumpServer"
fi
echo " ..."

if [ "$fJumpServer" != "" ]; then
    fSSHCmd="ssh -J $fJumpUser@$fJumpServer:$fJumpPort \
                 -o ServerAliveInterval=$fServerAliveInterval \
                 -o ServerAliveCountMax=$fServerAliveCountMax \
                 -p $fSSHPort -l $fSSHUser $fSSHTarget"
else
    fSSHCmd="ssh -o ServerAliveInterval=$fServerAliveInterval \
                 -o ServerAliveCountMax=$fServerAliveCountMax \
                 -p $fSSHPort -l $fSSHUser $fSSHTarget"
fi

# expect -d -c "
expect -c "
    # Set your SSH credentials
    set i 1
    set timeout 3

    # Define ANSI color codes with capitalized names
    # Full list can be found here: http://en.wikipedia.org/wiki/ANSI_escape_code
    # https://stackoverflow.com/questions/12879483/color-texts-at-expect-shell
    set RESET   \"\033\[0m\"
    set BOLD    \"\033\[1m\"
    set RED     \"\033\[31m\"
    set GREEN   \"\033\[32m\"
    set YELLOW  \"\033\[33m\"
    set BLUE    \"\033\[34m\"
    set MAGENTA \"\033\[35m\"
    set CYAN    \"\033\[36m\"
    set WHITE   \"\033\[37m\"

    while {\$i <= $fMaxAttempts} {
        # ssh -o StrictHostKeyChecking=no $fSSHTarget
        if {\$i > 1} {
            send_user \"$USER_NOTATION Login attempt \$i/$fMaxAttempts\n\"
        }
        spawn -noecho $fSSHCmd

        set session_id \$spawn_id
        set ssh_pwd_prompt_cnt 0
        set jmp_pwd_prompt_cnt 0
        set COLOR \$MAGENTA
        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re \"$fSSHTarget's (password|Password)\" {
                incr ssh_pwd_prompt_cnt
                if {\$ssh_pwd_prompt_cnt > 1} {
                    send_user \"\n$USER_NOTATION \${COLOR}Permission denied. Please check the login credentials.\${RESET}\n\"
                    exit 1
                }
                send \"$fSSHPwd\r\"
                exp_continue
            }
            -re \"$fJumpServer's (password|Password)\" {
                incr jmp_pwd_prompt_cnt
                if {\$jmp_pwd_prompt_cnt > 1} {
                    send_user \"\n$USER_NOTATION \${COLOR}Permission denied. Please check the login credentials.\${RESET}\n\"
                    exit 1
                }
                send \"$fJumpPwd\r\"
                exp_continue
            }
            {Host key verification failed.} {
                send_user \"$USER_NOTATION Host key verification failed. Updating known_hosts file...\n\"
                system \"ssh-keygen -R $fSSHTarget\"
                send_user \"$USER_NOTATION Host key removed from known_hosts file.\n\"
                send_user \"$USER_NOTATION Retrying SSH immediately...\n\"
                # close \$session_id
                incr i
                continue
            }
            {No route to host} {
                send_user \"$USER_NOTATION No route to host. Exiting...\n\"
                exit 1
            }
            \"$fExpectRoot\" {
                break
            }
            \"$fExpectUser\" {
                break
            }
            timeout {
                send_user \"$USER_NOTATION Timed out waiting for a response.\n\"
                # close \$session_id
                incr i
                continue
            }
            eof {
                send_user \"$USER_NOTATION \${COLOR}Reached EOF. Program ended.\${RESET}\n\"
                exit 1
            }
        }
    }

    if {\$i > $fMaxAttempts} {
        send_user \"$USER_NOTATION Failed to connect to $fSSHTarget\n\"
        exit 1
    }

    puts -nonewline \"$USER_NOTATION \${MAGENTA}Successfully connected to $fSSHTarget\${RESET}\"
    flush stdout
    send \"\r\"

    # check if fVdom is specified
    if {\"$fVdom\" != \"\"} {
        expect {
            -re \"$fExpectRoot\" {
                send \"config vdom\r\"
                expect {
                    {Command fail.} {
                        set COLOR \$BLUE
                        send_user \"\${COLOR}Error: VDOM $fVdom does not exist\${RESET}\n\"
                        exit 1
                    }
                    \"$fExpectRoot\" {
                        send \"edit $fVdom\r\"
                        expect \"$fExpectRoot\"
                    }
                }
            }
        }
    }

    proc handle_eof {} {
        global MAGENTA COLOR RESET
        set COLOR \$MAGENTA
        send_user \"$USER_NOTATION \${COLOR}Bye-bye.\${RESET}\n\"
        exit 1
    }

    interact {
        # \x04 is code for Ctrl-D
        # \x04 {
        #     handle_eof
        # }
    }
"
