#!/bin/bash

script_name=$(basename $0)
user_notation="@@@@"
password=""
login_user="admin"
fgt_prompt_root="# "
fgt_prompt_user="$ "
fgt_prompt=""
fgt_name="fgt1"
max_iterations=2

usage() {
cat << _EOF
jssh 0.0

usage:
    $script_name [-p password] [-u user] -P [fgt_prompt] [-t fgt_name/fgt_ip]

Options:
    -u user             User to use for login. Default is "$login_user"
    -p password         Password to use for login. Default is "$password"
    -P fgt_prompt       Prompt to expect(Currently not used). Default is "$fgt_prompt_root" or "$fgt_prompt_user".
    -t fgt_name/fgt_ip  The device to connect to. Default is "$fgt_name"

Example:
    $script_name -p 123 -u admin -t fgt1
    $script_name -p 123 -u admin -t 172.16.67.181
    $script_name -p 123 -t 172.16.67.181

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "p:u:t:P:h" opt; do
    case ${opt} in
        p)
            password=$OPTARG
            ;;
        u)
            login_user=$OPTARG
            ;;
        t)
            fgt_name=$OPTARG
            ;;
        P)
            fgt_prompt=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "$user_notation Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$user_notation Illegal non-option arguments: $@"
    exit
fi

# expect -d -c "
expect -c "
    set timeout 2
    for {set i 1} {\$i <= $max_iterations} {incr i} {
        # ssh -o StrictHostKeyChecking=no $fgt_name
        # send_user \"Sync attempt \$i/$max_iterations\n\"
        spawn -noecho ssh $login_user@$fgt_name

        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                send \"$password\r\"
                exp_continue
            }
            \"Host key verification failed.\" {
                send_user \"$user_notation Host key verification failed. Updating known_hosts file...\n\"
                system \"ssh-keygen -R $fgt_name\"
                send_user \"$user_notation Host key removed from known_hosts file.\n\"
                send_user \"$user_notation Retrying SSH immediately...\n\"
                continue
            }
            \"Permission denied\" {
                send_user \"$user_notation Permission denied. Have you specified the login credentials?\n\"
                exit 1
            }
            \"Connection refused\" {
                send_user \"$user_notation Connection refused. Action aborted.\n\"
                exit 1
            }
            eof {
                send_user \"$user_notation Reached EOF. Program ended.\n\"
                exit 1
            }
            timeout {
                send_user \"$user_notation Timed out waiting for a response. Have you specified the SSH Prompt?\n\"
                exit 1
            }
            \"$fgt_prompt_root\" {
                send_user \"$user_notation Successfully connected to $fgt_name\n\"
                break
            }
            \"$fgt_prompt_user\" {
                send_user \"$user_notation Successfully connected to $fgt_name\n\"
                break
            }
        }
    }

    send \"\r\"
    # Interact with the device
    interact
"

# + expect -d -c '
#     for {set i 1} {$i <= 2} {incr i} {
#         # ssh -o StrictHostKeyChecking=no 172.18.20.230
#         # send_user "Sync attempt $i/2\n"
#         spawn -noecho ssh admin@172.18.20.230

#         expect {
#             {yes/no} {
#                 send "yes\r"
#                 exp_continue
#             }
#             -re {[Pp]assword} {
#                 send "\r"
#                 exp_continue
#             }
#             "Host key verification failed." {
#                 send_user "@@@@ Host key verification failed. Updating known_hosts file...\n"
#                 system "ssh-keygen -R 172.18.20.230"
#                 send_user "@@@@ Host key removed from known_hosts file.\n"
#                 send_user "@@@@ Retrying SSH immediately...\n"
#                 continue
#             }
#             "Connection refused" {
#                 send_user "@@@@ Connection refused. Exiting...\n"
#                 exit 1
#             }
#             eof {
#                 puts "Reached EOF. Exiting..."
#                 exit 1
#             }
#             timeout {
#                 puts "Timed out waiting for a response."
#                 exit 1
#             }
#             "# " {
#                 puts "@@@@ Successfully connected to 172.18.20.230"
#                 break
#             }
#         }
#     }

#     send "\r"
#     expect "# "

#     # Now you can add additional commands or interactions as needed
#     # For example, you can automate further commands here

#     # Interact with the device
#     interact
# '
