#!/bin/bash

# SSH Local Forwarding
# -L [bind_address:]port:host:hostport
# -N Do not execute a remote command. This is useful for just forwarding ports.
# Topology:
# Local(127.0.0.1:8881) -> Jump server(172.18.20.226:22) -> Remote(10.40.1.101:22)
# $ ssh -N -L 127.0.0.1:8881:10.40.1.101:22 test@172.18.20.226
# test@172.18.20.226's fPasswd:
#
# $ netstat -tulnp | grep -i 8881
# tcp        0      0 127.0.0.1:8881          0.0.0.0:*               LISTEN      1208750/ssh
#
# and then
# $ ssh -l admin -p 8881 localhost
# or use
# $ jssh -l admin -P 8881 -t localhost

# Variables
scriptName=$(basename $0)
fSSHPort=22
fSSHUser="admin"
fPasswd="password"
fExpectRoot="# "
fExpectUser="$ "
fExpect=$fExpectUser
fSSHTarget="fgt1"
fMaxAttempts=2
fServerAliveInterval=30
fServerAliveCountMax=3
# Print Pretty
USER_NOTATION="@@@@"
SEPARATOR="----------------------------------------------------------------"

usage() {
cat << _EOF
jssh 0.1

usage:
    $scriptName [-l/-u user] [-p passwd] [-P ssh_port] [-E expect] -t target_ip

Options:
    -P      fSSHPort     SSH port to use. Default is "$fSSHPort"
    -l/-u   fSSHUser   User to use for login. Default is "$fSSHUser"
    -p      fPasswd      Password to use for login. Default is "$fPasswd"
    -E      fExpect      Except prompt to expect(other than "$fExpectRoot"). Default is "$fExpectUser".
    -t      fSSHTarget(IP)  The device to connect to. Default is "$fSSHTarget"

Example:
    $scriptName -t fpx1
    $scriptName -l admin -p 123 -t fgt1 -p 22
    $scriptName -l admin -p 123 -t 172.16.67.181

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "p:l:u:t:P:E:h" opt; do
    case ${opt} in
        p)
            fPasswd=$OPTARG
            ;;
        u) # User
            fSSHUser=$OPTARG
            ;;
        l) # User
            fSSHUser=$OPTARG
            ;;
        t)
            fSSHTarget=$OPTARG
            ;;
        E)
            fExpect=$OPTARG
            ;;
        P)
            fSSHPort=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "$USER_NOTATION Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$USER_NOTATION Illegal non-option arguments: $@"
    exit
fi

echo $SEPARATOR
echo "$USER_NOTATION Set Target Device to: $fSSHTarget"
echo "$USER_NOTATION Set SSH Connection Port to: $fSSHPort"
echo "$USER_NOTATION Set Username to: $fSSHUser"
echo "$USER_NOTATION Set Password to: $fPasswd"
echo "$USER_NOTATION Set Maximum Attempts to: $fMaxAttempts"
echo "$USER_NOTATION Connecting to $fSSHTarget ..."
echo $SEPARATOR

# expect -d -c "
expect -c "
    # Set your SSH credentials
    set i 1
    set timeout 3

    while {\$i <= $fMaxAttempts} {
        # ssh -o StrictHostKeyChecking=no $fSSHTarget
        if {\$i > 1} {
            send_user \"$USER_NOTATION Login attempt \$i/$fMaxAttempts\n\"
        }
        spawn -noecho ssh -o ServerAliveInterval=$fServerAliveInterval \
                          -o ServerAliveCountMax=$fServerAliveCountMax \
                          -p $fSSHPort -l $fSSHUser $fSSHTarget

        set session_id \$spawn_id
        set passwd_prompt_cnt 0
        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                incr passwd_prompt_cnt
                if {\$passwd_prompt_cnt > 1} {
                    send_user \"\n$USER_NOTATION Permission denied. Please specified the login credentials.\n\"
                    exit 1
                }
                send \"$fPasswd\r\"
                exp_continue
            }
            {Host key verification failed.} {
                send_user \"$USER_NOTATION Host key verification failed. Updating known_hosts file...\n\"
                system \"ssh-keygen -R $fSSHTarget\"
                send_user \"$USER_NOTATION Host key removed from known_hosts file.\n\"
                send_user \"$USER_NOTATION Retrying SSH immediately...\n\"
                close \$session_id
                incr i
                continue
            }
            {No route to host} {
                send_user \"$USER_NOTATION No route to host. Exiting...\n\"
                exit 1
            }
            \"$fExpectRoot\" {
                break
            }
            \"$fExpect\" {
                break
            }
            timeout {
                send_user \"$USER_NOTATION Timed out waiting for a response.\n\"
                close \$session_id
                incr i
                continue
            }
            eof {
                send_user \"$USER_NOTATION Reached EOF. Program ended.\n\"
                exit 1
            }
        }
    }

    if {\$i > $fMaxAttempts} {
        send_user \"$USER_NOTATION Failed to connect to $fSSHTarget.\n\"
        exit 1
    }

    send_user \"$USER_NOTATION Successfully connected to $fSSHTarget.\"
    send \"\r\"
    # Interact with the device
    interact
"

# + expect -d -c '
#     for {set i 1} {$i <= 2} {incr i} {
#         # ssh -o StrictHostKeyChecking=no 172.18.20.230
#         # send_user "Sync attempt $i/2\n"
#         spawn -noecho ssh admin@172.18.20.230

#         expect {
#             {yes/no} {
#                 send "yes\r"
#                 exp_continue
#             }
#             -re {[Pp]assword} {
#                 send "\r"
#                 exp_continue
#             }
#             "Host key verification failed." {
#                 send_user "@@@@ Host key verification failed. Updating known_hosts file...\n"
#                 system "ssh-keygen -R 172.18.20.230"
#                 send_user "@@@@ Host key removed from known_hosts file.\n"
#                 send_user "@@@@ Retrying SSH immediately...\n"
#                 continue
#             }
#             "Connection refused" {
#                 send_user "@@@@ Connection refused. Exiting...\n"
#                 exit 1
#             }
#             eof {
#                 puts "Reached EOF. Exiting..."
#                 exit 1
#             }
#             timeout {
#                 puts "Timed out waiting for a response."
#                 exit 1
#             }
#             "# " {
#                 puts "@@@@ Successfully connected to 172.18.20.230"
#                 break
#             }
#         }
#     }

#     send "\r"
#     expect "# "

#     # Now you can add additional commands or interactions as needed
#     # For example, you can automate further commands here

#     # Interact with the device
#     interact
# '
