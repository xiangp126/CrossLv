#!/bin/bash

if ! command -v get_credentials &> /dev/null; then
    echo "Error: Command get_credentials not found."
    exit 1
fi

if ! credentials_output=$(eval get_credentials); then
    echo "Error: Failed to get credentials."
    exit 1
fi

mapfile -t credentials <<< "$credentials_output"
ftntUser=${credentials[0]}
ftntPasswd=${credentials[1]}

USER_NOTATION="@@@@"
SCRIPT_LOCATION="/tmp/indexing_repos"

# check if the script exists
if [ ! -f "$SCRIPT_LOCATION" ]; then
    cat << _EOF > $SCRIPT_LOCATION
#!/bin/bash
# set -x

repo_dir="/opt/src"

update_git_repo() {
    local repo_path="\$1"
    echo -e "\n$USER_NOTATION Updating repository: \$repo_path"

    # switch to the repository directory
    cd "\$repo_path" || return 1
    # Check if it's a Git repository
    if [ -d ".git" ]; then
        # Get the current branch name
        current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
        # check the return code, if error then exit
        if [ \$? -ne 0 ]; then
            echo "$USER_NOTATION Warning: Not on any branch"
            return 1
        fi

        # git pull current branch
        echo "$USER_NOTATION Fetching tags:"
        git fetch --tags
        if [ \$? -ne 0 ]; then
            echo "@@@@ Error fetching tags. Aborting."
            exit 1
        fi
        echo "$USER_NOTATION Pulling the current branch: \$current_branch"
        git pull --rebase
        if [ \$? -ne 0 ]; then
            echo "$USER_NOTATION Error: Failed to pull the current branch: \$current_branch"
            exit 1
        fi
    else
        echo "$USER_NOTATION Not a Git repository: \$repo_path"
    fi

    # Return to the original directory
    cd - &>/dev/null
}

# Check if the directory exists
if [ ! -d "\$repo_dir" ]; then
    echo "$USER_NOTATION Error: The directory \$repo_dir does not exist."
    exit 1
fi

# List all subdirectories in the repository directory
# -o: logical OR operator. It allows to specify an alternative condition for the search.
repos=\$(find "\$repo_dir" -mindepth 1 -maxdepth 1 -type d -o -type l | sort)

# Loop through each repository and update it
for repo in \$repos; do
    update_git_repo "\$repo"
done

# call the indexer
if command -v callIndexer &> /dev/null; then
    # The command callIndexer exists, so you can execute it
    callIndexer -u
else
    echo "$USER_NOTATION callIndexer command not found"
fi
_EOF
    # check if the script executable
    if [ ! -x "$SCRIPT_LOCATION" ]; then
        chmod +x $SCRIPT_LOCATION
    fi
fi

expect -c "
    proc common_expect_block {fa_pattern} {
        global pattern_found user_notation
        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {[Uu]sername} {
                send \"$ftntUser\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                send \"$ftntPasswd\r\"
                exp_continue
            }
            -re \$fa_pattern {
                puts \"$USER_NOTATION Pattern \$fa_pattern\ Found in the output.\"
                set pattern_found true
                exp_continue
            }
            {OTP: } {
                # Promption for reading the FortiToken from the user
                expect_user -re \"(.*)\n\"
                set token \$expect_out(1,string)
                send \"\$token\r\"
                exp_continue
            }
            {Could not read from remote repository} {
                puts \"$USER_NOTATION Could not read from remote repository. Check your VPN connection.\"
                exit 1
            }
            timeout {
                puts \"$USER_NOTATION Timed out! Have you set up your VPN?\"
                exit 1
            }
            eof {}
        }
    }

    set fa_pattern \"2fa_verify\"
    set pattern_found false
    set timeout -1
    spawn bash $SCRIPT_LOCATION
    # exp_internal 1
    common_expect_block \$fa_pattern
    if {\$pattern_found == false} {
        exit 1
    }

    set fa_pattern \"OTP validation failed:\"
    set pattern_found false
    set timeout 180
    spawn ssh git@git-van.corp.fortinet.com 2fa_verify
    common_expect_block \$fa_pattern
    if {\$pattern_found == true} {
        exit 1
    }

    set timeout -1
    spawn bash $SCRIPT_LOCATION

    expect eof
"
