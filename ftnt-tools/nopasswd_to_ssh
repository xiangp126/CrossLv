#!/usr/bin/expect

if {$argc < 1} {
    puts "Usage: $argv0 <fgt2> \[password\]"
    puts "Example: $argv0 fgt2"
    exit 1
}

# Check if the password argument is provided
if {$argc > 1} {
    set password [lindex $argv 1]
} else {
    set password "fos"
}
set user "admin"
set user_notation "@@@@"
set fgt_prompt "# "
set fgt_name [lindex $argv 0]
set max_iterations 2

for {set i 1} {$i <= $max_iterations} {incr i} {
    # ssh -o StrictHostKeyChecking=no $fgt_name
    spawn -noecho ssh $user@$fgt_name

    expect {
        {yes/no} {
            send "yes\r"
            exp_continue
        }
        "password: " {
            send "fos\r"
            exp_continue
        }
        "Host key verification failed." {
            send_user "$user_notation Host key verification failed. Updating known_hosts file...\n"
            system "ssh-keygen -R $fgt_name"
            send_user "$user_notation Host key removed from known_hosts file.\n"
            send_user "$user_notation Retrying SSH immediately...\n"
            continue
        }
        eof {
        }
        timeout {
            # Handle timeout actions, such as error handling
            puts "Timed out waiting for a response."
            exit 1
        }
        $fgt_prompt {
            puts "$user_notation Successfully connected to $fgt_name"
            break
        }
    }
}

send "\r"
expect $fgt_prompt

# Now you can add additional commands or interactions as needed
# For example, you can automate further commands here

# End the Expect script
interact
