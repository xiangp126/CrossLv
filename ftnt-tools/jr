#!/bin/bash
# set -x

scriptName=$(basename $0)
USER_NOTATION="@@@@"
EDITOR="code"
# Colors
MAGENTA='\033[35m'
NORMAL='\033[0m'
BOLD='\033[1m'
RESET='\033[0m'
COLOR=$MAGENTA

usage() {
    cat << _EOF_
$scriptName v0.0

Usage: $scriptName [vz] <search term>

Options:
    -v  Open the file with vim (default is $EDITOR)
    -z  Search with empty query

Example: $scriptName "search term"
         $scriptName -z

Notice: The search term must be the last argument!

_EOF_
    exit 1
}

[[ $# -eq 0 ]] && usage

query="$@"

# parse the arguments, -v is for vim, -c is for code
while getopts "hvz" opt; do
    case ${opt} in
        v)
            EDITOR="vim"
            ;;
        z)
            query=""
            ;;
        h)
            usage
            ;;
        ?)
            echo "Invalid option: $OPTARG" 1>&2
            exit 1
            ;;
    esac
done

# OPTIND is a special variable used by getopts
# that keeps track of the next index in the positional parameters to be processed.
# After processing options, OPTIND will point to the first non-option argument.
shift $((OPTIND -1))
# [[ $# -gt 1 ]] && usage

preCheck() {
    if ! command -v rg &> /dev/null; then
        echo "$USER_NOTATION ripgrep is not installed"
        exit 1
    fi

    if ! command -v fzf &> /dev/null; then
        echo "$USER_NOTATION fzf is not installed"
        exit 1
    fi

    if ! command -v bat &> /dev/null; then
        echo "$USER_NOTATION bat is not installed"
        exit 1
    fi

    if ! command -v $EDITOR &> /dev/null; then
        echo "$USER_NOTATION $EDITOR is not installed"
        exit 1
    fi
}

parserAndPolish() {
    local param
    # Remove the leading and trailing spaces
    param=$(echo "$query" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

    # Polish query like <wad_http_req_setup_casb>
    pattern='^<(.*)>$'
    if [[ $param =~ $pattern ]]; then
        param="${BASH_REMATCH[1]}"
    fi
    # Polish query like wad_http_req_setup_casb:3071
    pattern='^(.*)\:[0-9]+$'
    if [[ "$param" =~ $pattern ]]; then
        param="${BASH_REMATCH[1]}"
    fi
    query="$param"
}

preCheck
parserAndPolish

# result=$(rg --smart-case \
#             --color=ansi \
#             --colors 'match:fg:204,51,153' --colors 'match:style:bold' \
#             --line-number --no-heading "$query" |
#         fzf --ansi \
#             --color 'hl:-1:underline,hl+:-1:underline:reverse' \
#             --delimiter ':' \
#             --preview "bat --color=always {1} --theme='TwoDark' --highlight-line {2}" \
#             --preview-window 'top,60%,border-bottom,+{2}+3/3,~3' \
#             --cycle \
#             --query "$query")

rgResult=$(rg --smart-case \
            --color=ansi \
            --colors 'match:fg:204,51,153' --colors 'match:style:bold' \
            --line-number --no-heading "$query")
if [ -z "$rgResult" ]; then
    echo -e "${COLOR}No result found${RESET}"
    exit 1
fi

fzfResult=$(echo "$rgResult" |
        fzf --ansi \
            --color 'hl:-1:underline,hl+:-1:underline:reverse' \
            --delimiter ':' \
            --preview "bat --color=always {1} --theme='TwoDark' --highlight-line {2}" \
            --preview-window 'top,60%,border-bottom,+{2}+3/3,~3' \
            --cycle \
            --query "$query")
if [ -z "$fzfResult" ]; then
    exit 0
fi

# Sample output of fzfResult:
# daemon/wad/wad_app_eng.c:3071:          goto session_make_failed;
pattern='([a-zA-Z0-9/.%_-]+):([0-9]+)'
if [[ $fzfResult =~ $pattern ]]; then
    file="${BASH_REMATCH[1]}"
    linenumber="${BASH_REMATCH[2]}"
else
    echo -e "${COLOR}Error: The result is in unexpected format${RESET}"
    exit 1
fi

if [ "$EDITOR" == "vim" ]; then
    $EDITOR +"${linenumber}" "$file"
    exit 0
else
    $EDITOR "$file":"$linenumber"
fi
