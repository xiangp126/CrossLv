#!/bin/bash
# set -x

scriptName=$(basename $0)
USER_NOTATION="@@@@"
EDITOR="code"
# Colors
MAGENTA='\033[35m'
NORMAL='\033[0m'
BOLD='\033[1m'
RESET='\033[0m'
COLOR=$MAGENTA

usage() {
    cat << _EOF_
$scriptName v0.0

Usage: $scriptName [vz] <search term>

Options:
    -v  Open the file with vim (default is $EDITOR)
    -z  Search with empty query

Example: $scriptName "search term"
         $scriptName -z

Notice: The search term must be the last argument!

_EOF_
    exit 1
}

[[ $# -eq 0 ]] && usage

# parse the arguments, -v is for vim, -c is for code
while getopts "hvz" opt; do
    case ${opt} in
        v)
            EDITOR="vim"
            ;;
        z)
            query=""
            ;;
        h)
            usage
            ;;
        ?)
            echo "Invalid option: $OPTARG" 1>&2
            exit 1
            ;;
    esac
done

# OPTIND is a special variable used by getopts
# that keeps track of the next index in the positional parameters to be processed.
# After processing options, OPTIND will point to the first non-option argument.
shift $((OPTIND -1))
# [[ $# -gt 1 ]] && usage

query="$@"

preCheck() {
    if ! command -v rg &> /dev/null; then
        echo "$USER_NOTATION ripgrep is not installed"
        exit 1
    fi

    if ! command -v fzf &> /dev/null; then
        echo "$USER_NOTATION fzf is not installed"
        exit 1
    fi

    if ! command -v bat &> /dev/null; then
        echo "$USER_NOTATION bat is not installed"
        exit 1
    fi

    if ! command -v $EDITOR &> /dev/null; then
        echo "$USER_NOTATION $EDITOR is not installed"
        exit 1
    fi
}

parserAndPolish() {
    [[ -z "$query" ]] && return
    local param
    param=$(echo "$query" | sed -E 's/^[[:space:]]*|[[:space:]]*$//g; s/^&//; s/;$//; s/^<|>$//g; s/:[0-9]+$//')
    query="$param"
}

searchAndOpen() {
    local finalResult=""
    # --glob='*.{c,h,cpp,js,ts,py,html,css,sh,php}'
            #  --glob='Makefile' \
    rgGlob=" --glob='*.{c}' \
             --glob='!*/linux/*'"
    rgParams=" --smart-case \
               --color=ansi \
               --colors 'match:fg:204,51,153' --colors 'match:style:bold' \
               --line-number \
               --no-heading"
    fzfParams=" --ansi \
                --color 'hl:-1:underline,hl+:-1:underline:reverse' \
                --delimiter ':' \
                --preview 'bat --color=always {1} --theme=\"TwoDark\" --highlight-line {2}' \
                --preview-window 'top,60%,border-bottom,+{2}+3/3,~3' \
                --cycle"
    if [ -z "$query" ]; then
        # rgParams=$(echo "$rgParams" | tr -s ' ')
        rgParams="$rgParams $rgGlob"
    fi
    # Squash multiple whitespaces
    rgParams=$(echo "$rgParams" | tr -s ' ')
    fzfParams=$(echo "$fzfParams" | tr -s ' ')
    # Make the query command
    rgQuery="rg $rgParams \"$query\""
    fzfQuery="fzf $fzfParams --query \"$query\""

    if [ -z "$query" ]; then
        finalResult=$(eval "$rgQuery" | eval "$fzfQuery")
    else
        rgResult=$(eval "$rgQuery")
        if [ -z "$rgResult" ]; then
            echo -e "${COLOR}No result found${RESET}"
            exit 1
        fi
        finalResult=$(echo "$rgResult" | eval "$fzfQuery")
    fi

    if [ -z "$finalResult" ]; then
        exit 0
    fi

    # Sample output of fzfResult:
    # daemon/wad/wad_app_eng.c:3071:          goto session_make_failed;
    pattern='([a-zA-Z0-9/.%_-]+):([0-9]+)'
    if [[ $finalResult =~ $pattern ]]; then
        file="${BASH_REMATCH[1]}"
        linenumber="${BASH_REMATCH[2]}"
    else
        echo -e "${COLOR}Error: The result is in unexpected format${RESET}"
        exit 1
    fi

    if [ "$EDITOR" == "vim" ]; then
        $EDITOR +"${linenumber}" "$file"
        exit 0
    else
        $EDITOR "$file":"$linenumber"
    fi

    }

preCheck
parserAndPolish
searchAndOpen
