#!/bin/bash
set -x

fSessionId="log"
fWinId="1"
fPaneId="1"
fSendNewLine=""
# If the command file is a dos file, there will be a '\r\n' ending in each command.
fCmdFile="/data/bugzilla/debug.c"
fTmuxPrefix="C-x"
SCRIPT_NAME=$(basename $0)
USER_NOTATION="@@@@"

usage() {
    cat << _EOF
jrun 0.0.0

Usage: $SCRIPT_NAME [-s session_id] [-w window_id] [-p pane_id] [-f command_file]
            [-n] [-h]

Options:
    -s      Set session ID (default: $fSessionId)
    -w      Set window ID (default: $fWinId)
    -p      Set pane ID (default: $fPaneId)
    -f      Specify command file (default: $fCmdFile)
    -n      Send Enter at the end of each command
    -h      Print this help message

Examples:
    $SCRIPT_NAME -s log -w 2 -p 2 -f $fCmdFile

Tips:
    1. Type $fTmuxPrefix, then q to view the pane number within the tmux window.
    2. Type $fTmuxPrefix, then s to view the session name in tmux.
    3. use // to comment out a line in the command file.
    4. use ! to omit the rest of the commands in the command file.

_EOF
    exit
}

[[ $# -eq 0 ]] && usage

# Parse options
while getopts "s:w:p:nf:h" opt; do
    case $opt in
        s)
            fSessionId="$OPTARG"
            ;;
        w)
            fWinId="$OPTARG"
            ;;
        p)
            fPaneId="$OPTARG"
            ;;
        f)
            fCmdFile="$OPTARG"
            ;;
        n)
            fSendNewLine="true"
            ;;
        h)
            usage
            ;;
        ?)
            echo "$USER_NOTATION Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$USER_NOTATION Illegal non-option arguments: $@"
    exit
fi

if [[ ! -f "$fCmdFile" ]]; then
    echo "$USER_NOTATION Command file '$fCmdFile' not found."
    exit 1
fi

# The following method will cache the entire file in memory before processing it.
# So if the file will be modified during the processing, this method is not suitable.
# while IFS= read -r command; do
# 	echo "Original command: $command"
# done < "$command_file"

# Read commands from file line by line
tail -n +1 "$fCmdFile" | while IFS= read -r command; do
	# echo "$USER_NOTATION Original command: $command"

	# In Bash, the <<< operator is used for here-strings.
	# Here-strings are a way to pass a string as input to a command.

	# The sed command consists of three components:
	# 1. Eliminates comments that begin with //, accounting for possible leading spaces.
	# 2. Deletes everything preceding the first colon (:) or hash (#) encountered.
	# 3. Clears any leading spaces that remain after the previous operations.
	cleanedCmd=$(sed '/^[[:space:]]*\/\//d; s/.*[:#]//; s/^[[:space:]]*//' <<< "$command")

	# If the cleaned command starts with an exclamation mark, exit
    if [[ ${cleanedCmd:0:1} == "!" ]]; then
        exit 0
    fi

    if [[ -z "$cleanedCmd" ]]; then
        # echo "$USER_NOTATION Cleaned command: Empty"
        continue
    fi

	# echo "$USER_NOTATION Original command: $command"
	echo "$USER_NOTATION Sending: $cleanedCmd"

    # Because there's a '\r\n' ending in each command already if the command file is a dos file,
    # We don't need to add an 'Enter' at the end of the send-keys command anymore.
    # But I still provide an option to add an 'Enter' at the end of each command forcefully.
    if [[ -n "$fSendNewLine" ]]; then
        # String end and home will be treated as key home and key end if not send them as literal strings.
        # Use -l to send the command as a literal string
        tmux send-keys -t "$fSessionId:$fWinId.$fPaneId" -l "$cleanedCmd"
        tmux send-keys -t "$fSessionId:$fWinId.$fPaneId" C-m
    else
        tmux send-keys -t "$fSessionId:$fWinId.$fPaneId" -l "$cleanedCmd"
    fi

	if [[ $? -ne 0 ]]; then
		echo "$USER_NOTATION Failed to send command: $cleanedCmd"
		exit 1
	fi
done
