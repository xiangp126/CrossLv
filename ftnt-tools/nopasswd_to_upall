#!/usr/bin/expect -f
set header_exp get_credentials

# Get the real directory of the script, resolving any symlinks
set script_path [file normalize [info script]]
# puts "script path is : $script_path"

# Determine the directory of the real script
set script_directory [file dirname $script_path]

# Source the other Expect script in the same directory
source "$script_directory/$header_exp"

# Check if an argument is provided
if {$argc > 0} {
    # Access the variable from the command line argument
    set mode [lindex $argv 0]
}

# Import necessary functions and set variables
set prompt "$ "
set timeout -1

set script_location "/tmp/git_upall_repos"
set user_notation "@@@@"

if {[file exists $script_location]} {
    set script_contents {#!/bin/bash

# Define the directory containing your Git repositories
repo_dir="/opt/src"
user_notation="@@@@"

# Function to update a Git repository
update_git_repo() {
    local repo_path="$1"
    echo -e  "\n$user_notation Updating repository: $repo_path"

    # switch to the repository directory
    cd "$repo_path" || return 1
    # Check if it's a Git repository
    if [ -d ".git" ]; then
        # Get the current branch name
        current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
        # check the return code, if error then exit
        if [ $? -ne 0 ]; then
            echo "$user_notation Warning: Not on any branch"
            return 1
        fi

        # git pull current branch
        echo "$user_notation Fetching tags:"
        git fetch --tags
        echo "$user_notation Pulling the current branch: $current_branch"
        git pull --rebase
        if [ $? -ne 0 ]; then
            echo "$user_notation Error: Failed to pull the current branch: $current_branch"
            return 1
        fi
    else
        echo "$user_notation Not a Git repository: $repo_path"
    fi

    # Return to the original directory
    cd - &>/dev/null
}

# Check if the directory exists
if [ ! -d "$repo_dir" ]; then
    echo "$user_notation Error: The directory $repo_dir does not exist."
    exit 1
fi

# List all subdirectories in the repository directory
repos=$(find "$repo_dir" -mindepth 1 -maxdepth 1 -type d)

# Loop through each repository and update it
for repo in $repos; do
    update_git_repo "$repo"
done

# call the indexer
if command -v callIndexer &> /dev/null; then
    # The command callIndexer exists, so you can execute it
    callIndexer
else
    echo "$user_notation callIndexer command not found"
fi
}

# Create the bash script
set script_file [open $script_location "w"]
puts $script_file $script_contents
close $script_file

# Set the executable permission for the script
exec chmod +x $script_location
}

proc common_expect_block {fa_pattern} {
    global pattern_found user_notation
    expect {
        {yes/no} {
            send "yes\r"
            exp_continue
        }
        -nocase -re "Username: " {
            send "$username\r"
            exp_continue
        }
        -nocase -re "Password:" {
            send "$password\r"
            exp_continue
        }
        -re $fa_pattern {
            puts "$user_notation Pattern '$fa_pattern' Found in the output."
            set pattern_found true
            exp_continue
        }
        -re "OTP: " {
            # Prompt for and read the FortiToken from the user
            # set timeout -1
            expect_user -re "(.*)\n"
            set token $expect_out(1,string)
            send "$token\r"
            exp_continue
        }
        timeout {
            puts "$user_notation Timed out! Have you set up your VPN?"
            exit 1
        }
        eof {}
    }
}

set fa_pattern "2fa_verify"
set pattern_found false
set timeout 180
spawn bash $script_location
common_expect_block $fa_pattern
if {$pattern_found == false} {
    exit 1
}

set fa_pattern "OTP validation failed:"
set pattern_found false
set timeout 180
spawn ssh git@git-van.corp.fortinet.com 2fa_verify
common_expect_block $fa_pattern
if {$pattern_found == true} {
    exit 1
}

set timeout -1
spawn bash $script_location
