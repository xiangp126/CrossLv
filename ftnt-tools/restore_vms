#!/bin/bash

# Default values
backup_dir="/data/Backup/vms"
restore_dir="/usr/local/vms"
script_name=$(basename $0)
# The vm to restore
vm_name=""
sleep_time=6
max_loop_cnt=5

# Function to display help
usage() {
    cat << _EOF
vm_backup 1.0

Usage:
    $script_name -t vm_name

Options:
    -t      vm_name      Name of the VM to restore
    -h      help         Display this help message

Example:
    $script_name -t fgt1

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "t:h" opt; do
    case ${opt} in
        t)
            vm_name=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$USER_NOTATION Illegal non-option arguments: $@"
    exit
fi

backed_up_vm="$backup_dir/$vm_name.qcow2"
if [ ! -f "$backed_up_vm" ]; then
    echo "Error: $backed_up_vm does not exist."
    exit 1
fi

# Check if the VM is running
vm_status=$(virsh list --all | grep "$vm_name" | awk '{print $3}')
if [ "$vm_status" == "running" ]; then
    echo "VM $vm_name is running; shutting it down forcibly now."
    virsh destroy "$vm_name"

    # Wait for the VM to shutdown
    sleep $sleep_time
    loop_cnt=0
    vm_status=$(virsh list --all | grep "$vm_name" | awk '{print $3}')
    while [ "$vm_status" == "running" ]; do
        if [ $loop_cnt -ge $max_loop_cnt ]; then
            echo "Error: VM $vm_name is still running after $loop_cnt loops, exiting."
            exit 1
        fi
        echo "VM $vm_name is still running, sleeping $sleep_time seconds and checking again."
        sleep $sleep_time
        loop_cnt=$((loop_cnt+1))
        vm_status=$(virsh list --all | grep "$vm_name" | awk '{print $3}')
    done
fi

echo "Restoring XML configuration file"
sudo rsync -av "$backup_dir/$vm_name.xml" "/etc/libvirt/qemu/$vm_name.xml"

echo "Restoring VM: $vm_name"
sudo cp -v "$backed_up_vm" "$restore_dir/$vm_name.qcow2"

file_owner=$(stat -c %U "$restore_dir/$vm_name.qcow2")
if [ "$file_owner" != "libvirt-qemu" ]; then
    echo "Changing owner of $vm_name.qcow2 to libvirt-qemu:kvm"
    sudo chown -v libvirt-qemu:kvm "$restore_dir/$vm_name.qcow2"
fi

echo "Restore complete for VM: $vm_name"
# Uncomment if needed:
# echo "# Restart libvirtd service if needed."
# echo "# sudo systemctl restart libvirtd"

# Restart libvirtd service if needed
# sudo systemctl restart libvirtd

echo "Starting VM $vm_name"
virsh start "$vm_name"
