#!/bin/bash

backup_dir="/data/Backup/vms"

# check $1 is not empty
if [ -z "$1" ]; then
    echo "Usage: $0 <vm_name>"
    echo "Example: $0 client2"
    exit 1
fi

vm_name=$1
backup_vm="$backup_dir/$vm_name.qcow2"
target_dir=/usr/local/vms
if [ ! -f "$backup_vm" ]; then
    echo "Error: $backup_vm does not exist."
    exit 1
fi

# check if the VM is running
sleep_time=5
max_loop_cnt=5

vm_status=$(virsh list --all | grep "$vm_name" | awk '{print $3}')
if [ "$vm_status" == "running" ]; then
    echo "VM $vm_name is running; shut it down forcely now."
    virsh destroy "$vm_name"

    # wait for the VM to shutdown
    sleep $sleep_time
    loop_cnt=0
    vm_status=$(virsh list --all | grep "$vm_name" | awk '{print $3}')
    while [ "$vm_status" == "running" ]; do
		if [[ $loop_cnt -ge $max_loop_cnt ]]; then
            echo "Error: VM $vm_name is still running after $loop_cnt loops, exit."
            exit 1
        fi
        echo "VM $vm_name is still running, sleep $sleep_time seconds and check again."
        sleep $sleep_time
        loop_cnt=$((loop_cnt+1))
        vm_status=$(virsh list --all | grep "$vm_name" | awk '{print $3}')
    done
fi

echo "Restore XML configuration file"
sudo rsync -av "$backup_dir/$vm_name.xml" "/etc/libvirt/qemu/$vm_name.xml"

echo "Restoring VM: $vm_name"
sudo cp -v "$backup_vm" "$target_dir/$vm_name.qcow2"

file_owner=$(stat -c %U "$target_dir/$vm_name.qcow2")
if [ "$file_owner" != "libvirt-qemu" ]; then
    echo "Change owner of $vm_name.qcow2 to libvirt-qemu:kvm"
    sudo chown -v libvirt-qemu:kvm "$target_dir/$vm_name.qcow2"
fi

echo "Restore complete for VM: $vm_name"
# echo "# Restart libvirtd service if needed."
# echo "# sudo systemctl restart libvirtd"

# sudo systemctl restart libvirtd

echo "Restart VM $vm_name"
virsh start "$vm_name"
