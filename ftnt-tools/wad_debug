#!/usr/bin/expect -f

if {$argc == 0} {
    puts "Usage: $argv0 <Device name or IP address> <Process Type> <listen port> <passwd>"
    puts "Example: $argv0 fgt1"
    puts "Example: $argv0 fgt1 algo"
    puts "Example: $argv0 fgt1 algo 9229"
    puts "Example: $argv0 fgt1 algo 9229 123"
    exit 1
}

set fgt_dev [lindex $argv 0]
set proc_type [lindex $argv 1]
set listen_port [lindex $argv 2]
set passwd [lindex $argv 3]

if {$listen_port == ""} {
    set listen_port 444
}
if {$proc_type == ""} {
    set proc_type "worker"
}
if {$passwd == ""} {
    set passwd ""
}

# Function to check if the parameter is a valid IPv4 address
proc is_valid_ipv4 {ip} {
    if {[regexp {^(\d{0,3}\.){3}\d{1,3}$} $ip]} {
        set octets [split $ip .]
        foreach octet $octets {
            if {$octet > 254} {
                return 0 ;# Not a valid IPv4 address
            }
        }
        return 1 ;# Valid IPv4 address
    } else {
        return 0 ;# Not a valid IPv4 address
    }
}

# check if the parameter is a valid IPv4 address or a FortiGate name
if {$fgt_dev ni {"fgt1" "fgt2" "fpx1" "fpx3"}} {
    if {![is_valid_ipv4 $fgt_dev]} {
        puts "Invalid FortiGate name or IP address: $fgt_dev"
        exit 1
    }
}

# Set your SSH credentials
set user "admin"
set port "22"
set prompt "# "
set user_notation "@@@@"

set i 0
set timeout 2
while { $i < 3 } {
    # Spawn the SSH process
    # spawn ssh -p $port $user@$fgt_dev
    spawn ssh admin@$fgt_dev
    set process_id $spawn_id
    expect {
        "yes/no" {
            send "yes\r"
            break
        }
        "password:" {
            send "$passwd\r"
            break
        }
        "Connection refused" {
            # puts "Connection refused when connecting to $fgt_dev"
            exit 1
        }
        $prompt {
            send "\r"
            break
        }
        timeout {
            puts "$user_notation Timeout when connecting to $fgt_dev"
            close $process_id
            if {$i == 2} {
                exit 1
            }
            incr i
            continue
        }
    }
}

set timeout 10
expect $prompt
send "diagnose debug reset\r"
expect $prompt
send "diagnose debug enable\r"
expect $prompt
send "diagnose test application wad 1000\r"
expect $prompt
set output $expect_out(buffer)

# Search for the line with "type=worker" and extract the PID
set worker_pid ""
foreach line [split $output "\n"] {
    if {[string match "*type=$proc_type*" $line]} {
        # Extract the PID from the line
        set regex {pid=(\d+)}
        if {[regexp $regex $line match worker_pid]} {
            break
        }
    }
}

if {$worker_pid == ""} {
    puts "$user_notation Could not find worker PID"
    exit 1
}

send "\r"
expect $prompt

send "diagnose debug reset\r"
expect $prompt

# send "diagnose wad debug enable all\r"
# expect $prompt

# send "diagnose sys scanunit debug all\r"
# expect $prompt

set shell_prompt "/ # "
send "sys sh\r"
expect $shell_prompt

# start gdbserver
set timeout -1
send "gdbserver 0.0.0.0:$listen_port --attach $worker_pid\r"

# \x03 is used to send a Ctrl-C signal when the trap detects the SIGINT (Ctrl-C) signal.
trap {
    # Disable console logging. The output may contain multiple blank lines starts with '/ # '.
    log_user 0
    puts "\n$user_notation CTRL+C detected, sending SIGINT to gdbserver as well."
    send \x03
} SIGINT

# interact
log_user 1
expect $shell_prompt
