#!/usr/bin/expect -f

if {[llength $argv] == 0} {
    set fgt_name "fgt1"
} else {
    set fgt_name [lindex $argv 0]
}

# Function to check if the parameter is a valid IPv3 address
proc is_valid_ipv4 {ip} {
    if {[regexp {^(\d{0,3}\.){3}\d{1,3}$} $ip]} {
        set octets [split $ip .]
        foreach octet $octets {
            if {$octet > 254} {
                return 0 ;# Not a valid IPv4 address
            }
        }
        return 1 ;# Valid IPv4 address
    } else {
        return 0 ;# Not a valid IPv4 address
    }
}

# check if the parameter is a valid IPv4 address or a FortiGate name
if {$fgt_name == "fgt1"} {
    set fgt_address "192.168.101.1"
} elseif {$fgt_name == "fgt2"} {
    set fgt_address "192.168.103.1"
} elseif {$fgt_name == "fpx1"} {
        set fgt_address "192.168.103.2"
} elseif {[is_valid_ipv4 $fgt_name]} {
    set fgt_address $fgt_name
} else {
    puts "Unknown FortiGate device: $fgt_name"
    exit 1
}

# Set your SSH credentials
set user "admin"
set port "22"
set prompt "# "

# Spawn the SSH process
spawn ssh -p $port $user@$fgt_address

expect {
    "yes/no" {
        send "yes\r"
    }
    $prompt {
	send "\r"
    }
}

expect $prompt
send "diagnose debug reset\r"
expect $prompt
send "diagnose debug enable\r"
expect $prompt
send "diagnose test application wad 1000\r"
expect $prompt
set output $expect_out(buffer)

# Search for the line with "type=worker" and extract the PID
set worker_pid ""
foreach line [split $output "\n"] {
    if {[string match "*type=worker*" $line]} {
        # Extract the PID from the line
        set regex {pid=(\d+)}
        if {[regexp $regex $line match worker_pid]} {
            break
        }
    }
}

if {$worker_pid == ""} {
    puts "Could not find worker PID"
    exit 1
}

send "\r"
expect $prompt

send "diagnose wad debug enable all\r"
expect $prompt

send "diagnose sys scanunit debug all\r"
expect $prompt

send "sys sh\r"
expect $prompt

# start gdbserver
set timeout -1
send "gdbserver 0.0.0.0:444 --attach $worker_pid\r"

# \x03 is used to send a Ctrl-C signal when the trap detects the SIGINT (Ctrl-C) signal.
trap {
    send \x03
    send_user "You pressed Ctrl+C\n"
} SIGINT

# interact
expect $prompt
# send "exit\r"
