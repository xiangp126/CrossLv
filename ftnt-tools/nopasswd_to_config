#!/usr/bin/expect -f

set header_exp get_credentials

# Get the real directory of the script, resolving any symlinks
set script_path [file normalize [info script]]
# puts "script path is : $script_path"

# Determine the directory of the real script
set script_directory [file dirname $script_path]

# Source the other Expect script in the same directory
source "$script_directory/$header_exp"

# Set a custom timeout value in seconds (e.g., 180 seconds)
set custom_timeout 180

# set mode "FGT_601F"
set mode "FGT_VM64_KVM"

# Set the working directory to the current directory
set working_dir [exec pwd]

# Check if an argument is provided and set mode accordingly
if {$argc == 1} {
    set provided_mode [lindex $argv 0]
    if {$provided_mode eq "fpx"} {
        set mode FPX_KVM
    } elseif {$provided_mode eq "fgt"} {
        set mode FGT_VM64_KVM
    } else {
        set mode $provided_mode
    }
} else {
    if {$argc > 1} {
        set working_dir [lindex $argv 1]
    }

    # Check if the directory name contains "fos"
    if {[string match -nocase "*fos*" $working_dir] || [string match -nocase "*fortios*" $working_dir]} {
        set mode "FGT_VM64_KVM"
    } else {
        # Check if the directory name contains "fpx" or "proxy"
        if {[string match -nocase "*fpx*" $working_dir] || [string match -nocase "*proxy*" $working_dir]} {
            set mode "FPX_KVM"
        } else {
            puts "Unknown product. Please provide a fos/fpx path as an argument."
            exit 1
        }
    }
}

# Spawn your target script or command using the "mode" variable
set bash_prompt "$ "
spawn -noecho bash
log_user 0
expect $bash_prompt
send "cd $working_dir\r"
expect $bash_prompt
set spawned_config_cmd "./Configure -m $mode -d y -c"
log_user 1
send "$spawned_config_cmd\r"

# Set the timeout value for this specific interaction
set timeout $custom_timeout

expect {
    "Username: " {
        send "$username\r"
        exp_continue
    }
    "Password for '$username': " {
        send "$password\r"
        exp_continue
    }
    "$bash_prompt" {
        # log_user 0
        # send "exit\r"
        send "\x04\r"
    }
    timeout {
        # Handle timeout actions, such as error handling
        puts "Timed out waiting for a response."
        exit 1
    }
}

expect eof
