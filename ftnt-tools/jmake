#!/bin/bash
# Flags
# FGT_VM64 for VMWARE, FGT_VM64_KVM for KVM
fMode=FGT_VM64_KVM
fModeSpecified=false
fNumOfWorkers=$(nproc)
fWorkingDir=$(pwd)
fMaxAttempt=3
fUseBear=false
fRunConfigure=false
fNeedBuild=false
fGitClean=false
fRemoveCompileCommandsJson=false
# Variables
scriptName=$(basename $0)
scriptWd=$(dirname $0)
pathOfNoPasswdToConfig=$scriptWd/nopasswd_to_config
# Git
compileCommandsFile="compile_commands.json"
gitExcludePattern1=$compileCommandsFile
gitExcludePattern2="\*.code-workspace"
gitExcludeList="$gitExcludePattern1 $gitExcludePattern2"
# Misc
userNotation="@@@@"
subUserNotation="@@@@ @"

usage() {
    cat << _EOF
jmake 0.0.1

Usage: $scriptName [-m mode] [-w working_dir] [-j num_of_workers] [-T max_attempt] [-bcCoahf]
Options:
    -C      Run Configure by calling expect scripts (default: $fRunConfigure)
    -o      Run build commands (set automatically if any of the [bmjwT] options is set)
    -a      Equivalent to -Co
    -T      Set the maximum number of attempts (default: $fMaxAttempt)
    -c      Clean the repo (default: $fGitClean)
    -b      Use Bear to generate $compileCommandsFile (default: $fUseBear)
    -m      Set build target/mode (default: $fMode, auto detect FGT_VM64_KVM and FPX_KVM)
    -j      Set the number of jobs (default: $fNumOfWorkers)
    -w      Set working directory (default: $fWorkingDir)
    -f      Remove $compileCommandsFile (default: $fRemoveCompileCommandsJson)
    -h      Print this help message

Example:
    $scriptName -C  // Only run Configure
    $scriptName -o  // Only run build commands
    $scriptName -a  // Run Configure and build commands
    $scriptName -m FGT_VM64_KVM -j4 -bC
    $scriptName -m FGT_VM64_KVM -j4 -bc
    $scriptName -bc
    $scriptName -j4 -b
    $scriptName -T1
    $scriptName -h

_EOF
    exit
}

[[ $# -eq 0 ]] && usage

# Parse the options
while getopts "hm:w:j:cCboafT:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        m)
            fMode=$OPTARG
            fModeSpecified=true
            fNeedBuild=true
            ;;
        w)
            fWorkingDir=$OPTARG
            fNeedBuild=true
            ;;
        j)
            fNumOfWorkers=$OPTARG
            fNeedBuild=true
            ;;
        T)
            fMaxAttempt=$OPTARG
            fNeedBuild=true
            ;;
        b)
            fUseBear=true
            fNeedBuild=true
            ;;
        C)
            fRunConfigure=true
            ;;
        c)
            # Ignore compile_commands.json by default
            fGitClean=true
            ;;
        f)
            fRemoveCompileCommandsJson=true
            ;;
        o)
            fNeedBuild=true
            ;;
        a)
            fRunConfigure=true
            fNeedBuild=true
            ;;
        ?)
            echo "$userNotation Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$userNotation Illegal non-option arguments: $@"
    exit
fi

# Check the working directory
if [[ -x "$(command -v realpath)" ]]; then
    fWorkingDir=$(realpath $fWorkingDir)
fi
if [[ ! -d "$fWorkingDir" ]]; then
    echo "$userNotation Directory $fWorkingDir not found"
    exit 1
fi

echo "$userNotation Set working directory to $fWorkingDir"
echo "$userNotation Set build mode to $fMode"
echo "$userNotation Set number of jobs to $fNumOfWorkers"
if [[ "$fUseBear" == true ]]; then
    echo "$userNotation Use bear to generate compile_commands.json"
    if [[ "$RemoveCompileCommandsJson" == true ]]; then
        echo "$userNotation Will remove compile_commands.json if exists"
    fi
fi

# Clean the working directory
if [[ "$fGitClean" == true ]]; then
    echo "$userNotation Cleaning the working directory ..."
    cd $fWorkingDir
    gitExcludePattern=""
    for patt in $gitExcludeList; do
        if [[ "$fRemoveCompileCommandsJson" == true ]]; then
            if [[ "$patt" == "$compileCommandsFile" ]]; then
                echo "$subUserNotation Will remove $compileCommandsFile if exists"
                continue
            fi
        fi
        echo "$subUserNotation Exclude $patt"
        gitExcludePattern+="--exclude=$patt "
    done

    gitCleanCmd="git clean -xdf $gitExcludePattern"
    echo "$subUserNotation Running: $gitCleanCmd"

    sleep 1
    eval "$gitCleanCmd"
    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to clean the working directory"
        exit 1
    else
        echo "$subUserNotation Cleaned the working directory successfully"
    fi
fi

expectPath=$(command -v expect)
if [[ -z "$expectPath" ]]; then
    echo "$userNotation Command expect not found"
    exit 1
fi

# Step 1: Run Configure
if [[ "$fRunConfigure" == true ]]; then
    echo "$userNotation Running Configure ..."
    echo "$subUserNotation Running nopasswd_to_config (Wd:$fWorkingDir, Mode:$fMode)"
    sleep 1

    if [[ "$fModeSpecified" == true ]]; then
        $expectPath -f $pathOfNoPasswdToConfig $fWorkingDir $fMode
    else
        $expectPath -f $pathOfNoPasswdToConfig $fWorkingDir
    fi

    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to run $pathOfNoPasswdToConfig"
        exit 1
    fi
fi

if [[ "$fNeedBuild" == false ]]; then
    exit 0
fi

# Step 2: Run build commands
jsonFile=$compileCommandsFile
jsonPath=$fWorkingDir/$jsonFile

cd $fWorkingDir
makeCommand="make -j$fNumOfWorkers image.out"
if [[ "$fUseBear" == true ]]; then
    bearPath=$(command -v bear)
    if [[ -z "$bearPath" ]]; then
        echo "$userNotation Command bear not found, please install it first"
        echo "$userNotation sudo apt install bear libear -y"
        exit 1
    fi
    pathOfLibear=$(locate libear.so | grep -m 1 libear.so)
    if [[ "$pathOfLibear" != "" ]]; then
        bear="bear -l $pathOfLibear"
    else
        local defaultLiBearPath="/usr/lib/x86_64-linux-gnu/bear/libear.so"
        if [[ ! -f "$defaultLiBearPath" ]]; then
            echo "$userNotation libear.so not found, please install it first"
            echo "$userNotation sudo apt install libear -y"
            exit 1
        fi
        bear="bear -l $defaultLiBearPath"
    fi
    makeCommand="$bear $makeCommand"
fi

# Check if compile_commands.json is writable
if [[ -f "$jsonPath" && ! -w "$jsonPath" ]]; then
    echo "$userNotation Detected $jsonPath is read-only"
    if [[ "$fRemoveCompileCommandsJson" == true ]]; then
        echo "$userNotation Remove $jsonPath"
        rm -f $jsonPath
        if [[ $? -ne 0 ]]; then
            echo "$userNotation Failed to remove $jsonPath"
            exit 1
        fi
    fi
fi

attempt=1
maxAttempt=$fMaxAttempt
if [[ "$fNeedBuild" == true ]]; then

    while [[ $attempt -le $maxAttempt ]]; do
        echo "$userNotation Running build commands: $makeCommand"
        echo "$subUserNotation Attempt $attempt/$maxAttempt"
        # [[ $attempt -gt 1 ]] && sleep 2
        sleep 2

        eval "$makeCommand"
        eval_status=$?
        if [[ $eval_status -eq 0 ]]; then
            break
        else
            attempt=$((attempt + 1))
        fi
    done

    if [[ $eval_status -ne 0 ]]; then
        echo "$userNotation Build projects failed."
        echo "$subUserNotation Suggest to clean the working directory and try again."
        exit 1
    fi
fi

# Step 3: Remove the write privilege of compile_commands.json
if [[ -f "$jsonPath" && -w "$jsonPath" ]]; then
    echo "$userNotation $jsonPath is writable"
    echo "$userNotation Remove the write privilege of $jsonPath"
    chmod -w $jsonPath
    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to remove the write privilege of $jsonPath"
        exit 1
    fi
fi

echo "$userNotation Congratulations! You have built projects successfully."
