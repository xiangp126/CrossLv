#!/bin/bash
# Flags
fMode=FGT_VM64_KVM
fNumOfWorkers=$(nproc)
fWorkingDir=$(pwd)
fUseBear=false
fRunConfigure=false
fGitClean=false
fNeedBuild=false
# Variables
scriptName=$(basename $0)
scriptWd=$(dirname $0)
pathOfNoPasswdToConfig=$scriptWd/nopasswd_to_config
# Git
gitExcludePattern1="compile_commands.json"
gitExcludePattern2="\*.code-workspace"
gitExcludeList="$gitExcludePattern1 $gitExcludePattern2"
# Misc
userNotation="@@@@"

usage() {
    cat << _EOF
Usage: $scriptName [-m mode] [-w working_dir] [-j num_of_workers] [-bcCoah]
Options:
    -h      Print this help message
    -C      Run Configure (default: $fRunConfigure)
    -o      Run build commands (set automatically if any of the [bmjw] options is set)
    -a      Equivalent to -Co
    -c      Clean the repo (default: $fGitClean)
    -b      Use Bear to generate $compileCommandsFile (default: $fUseBear)
    -m      Set build target (default: $fMode, auto detect FGT_VM64_KVM and FPX_KVM)
    -j      Set the number of workers (default: $fNumOfWorkers)
    -w      Set working directory (default: $fWorkingDir)

Example:
    $scriptName -C  // Only run Configure
    $scriptName -o  // Only run build commands
    $scriptName -a  // Run Configure and build commands
    $scriptName -m FGT_VM64_KVM -j4 -bC
    $scriptName -m FGT_VM64_KVM -j4 -bc
    $scriptName -bc
    $scriptName -j4 -b
    $scriptName -h

_EOF
    exit
}

[[ $# -eq 0 ]] && usage

# Parse the options
while getopts "hm:w:j:cCboa" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        m)
            fMode=$OPTARG
            fNeedBuild=true
            ;;
        w)
            fWorkingDir=$OPTARG
            fNeedBuild=true
            ;;
        j)
            fNumOfWorkers=$OPTARG
            fNeedBuild=true
            ;;
        b)
            fUseBear=true
            fNeedBuild=true
            ;;
        C)
            fRunConfigure=true
            ;;
        c)
            # git clean will exclude the compile_commands.json
            fGitClean=true
            ;;
        o)
            fNeedBuild=true
            ;;
        a)
            fRunConfigure=true
            fNeedBuild=true
            ;;
        ?)
            echo "$userNotation Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$userNotation Illegal non-option arguments: $@"
    exit
fi

# Check the working directory
if [[ -x "$(command -v realpath)" ]]; then
    fWorkingDir=$(realpath $fWorkingDir)
fi
if [[ ! -d "$fWorkingDir" ]]; then
    echo "$userNotation Directory $fWorkingDir not found"
    exit 1
fi

echo "$userNotation Set working directory to $fWorkingDir"
echo "$userNotation Set build mode to $fMode"
echo "$userNotation Set number of workers to $fNumOfWorkers"
if [[ "$fUseBear" == true ]]; then
    echo "$userNotation Use bear to generate compile_commands.json"
fi

# Clean the working directory
if [[ "$fGitClean" == true ]]; then
    cd $fWorkingDir
    gitExcludePattern=""
    for patt in $gitExcludeList; do
        gitExcludePattern+="--exclude=$patt "
    done

    gitCleanCmd="git clean -xdf $gitExcludePattern"
    echo "$userNotation Cleaning the working directory ..."
    echo "$userNotation Running: $gitCleanCmd"
    eval "$gitCleanCmd"
    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to clean the working directory"
        exit 1
    else
        echo "$userNotation Cleaned the working directory successfully"
    fi
fi

expectPath=$(command -v expect)
if [[ -z "$expectPath" ]]; then
    echo "$userNotation Command expect not found"
    exit 1
fi

# Step 1: Run Configure
if [[ "$fRunConfigure" == true ]]; then
    echo "$userNotation Running Configure ..."
    echo "$userNotation Running nopasswd_to_config [mode:]$fMode [working_directory:]$fWorkingDir"
    expect -f $pathOfNoPasswdToConfig $fMode $fWorkingDir

    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to run $pathOfNoPasswdToConfig"
        exit 1
    fi
fi

if [[ "$fNeedBuild" == false ]]; then
    exit 0
fi

# Step 2: Run build commands
jsonFile=$compileCommandsFile
jsonPath=$fWorkingDir/$jsonFile

cd $fWorkingDir
makeCommand="make -j$fNumOfWorkers image.out"
if [[ "$fUseBear" == true ]]; then
    bearPath=$(command -v bear)
    if [[ -z "$bearPath" ]]; then
        echo "$userNotation Command bear not found, please install it first"
        echo "$userNotation sudo apt install bear libear -y"
        exit 1
    fi
    pathOfLibear=$(locate libear.so | grep -m 1 libear.so)
    if [[ "$pathOfLibear" != "" ]]; then
        bear="bear -l $pathOfLibear"
    else
        bear="bear -l /usr/lib/x86_64-linux-gnu/bear/libear.so"
    fi
    makeCommand="$bear $makeCommand"
fi

# Check if the compile_commands.json is writable
if [[ -f "$jsonPath" && ! -w "$jsonPath" ]]; then
    echo "$userNotation Detected $jsonPath is read-only"
    # echo "$userNotation Add write privilege to $jsonPath"
    # chmod +w "$jsonPath"
    # if [[ $? -ne 0 ]]; then
    #     echo "$userNotation Failed to add write privilege to $jsonPath"
    #     exit 1
    # fi
fi

if [[  "$fNeedBuild" == true ]]; then
    echo "$userNotation Running build commands: $makeCommand"
    eval "$makeCommand"
    if [[ $? -ne 0 ]]; then
        echo "$userNotation Build projects failed"
        exit 1
    fi
fi

# Step 3: Remove the write privilege of compile_commands.json
if [[ -f "$jsonPath" && -w "$jsonPath" ]]; then
    echo "$userNotation $jsonPath is writable"
    echo "$userNotation Remove the write privilege of $jsonPath"
    chmod -w $jsonPath
    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to remove the write privilege of $jsonPath"
        exit 1
    fi
fi

echo "$userNotation Congurations! You have built projects successfully."
