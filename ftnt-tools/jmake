#!/bin/bash

# Variables
scriptName=$(basename $0)
scriptWd=$(dirname $0)
pathOfNoPasswdToConfig=$scriptWd/nopasswd_to_config
ftntBuildTarget="image.out"

# Build flags
fMode=FGT_VM64_KVM  # FOS: FGT_VM64 for VMWARE, FGT_VM64_KVM for KVM
fModeSpecified=false
fNumOfWorkers=$(nproc)
fWorkingDir=$(pwd)
fMaxBuildAttempt=2
fUseBear=false
fRunConfigure=false
fNeedBuild=false
fGitClean=false
fRMCompileCommandsJson=false
# The build target
fBuildTarget="$ftntBuildTarget"
# The source file to sync
fSyncFile=$fBuildTarget
# The sync target machine
fSyncTarget=false
fSyncUsername="admin"
fSyncPassword="password"

# Git associated variables
compileCommandsFile="compile_commands.json"
gitExcludePattern1=$compileCommandsFile
gitExcludePattern2="\*.code-workspace"
gitExcludeList="$gitExcludePattern1 $gitExcludePattern2"

# Pretty print
userNotation="@@@@"
subUserNotation="@@@@ @"
separator="----------------------------------------------------------------"
separator2="---------------------------------------->"

getCurrentTime() {
    echo $(date +"%m/%d/%Y %H:%M:%S")
}

usage() {
    cat << _EOF
jmake 0.2.0

Usage: $scriptName [options]
       $scriptName [-m mode] [-w working_dir] [-j num_of_workers] [-T max_attempt]
             [-s sync_target] [-S sync_file] [-u username] [-p password]
             [-B build_target]
             [-bcCohf]

Options:
    -c      Clean the repo (default: $fGitClean)
    -C      Run Configure intelligently (default: $fRunConfigure)
    -o      Run build commands (set automatically if any of the [bmjwT] options is set)
    -T      Set the maximum number of build attempts (default: $fMaxBuildAttempt)
    -b      Use Bear to generate $compileCommandsFile (default: $fUseBear)
    -B      Set the build target (default: $fBuildTarget)
    -m      Set the build mode (default: $fMode, auto detect FGT_VM64_KVM and FPX_KVM)
    -j      Set the number of jobs (default: $fNumOfWorkers)
    -w      Set working directory (default: $fWorkingDir)
    -f      Remove $compileCommandsFile (default: $fRMCompileCommandsJson)
    -s      Set the target machine (default: $fSyncTarget) to sync the source file specified by -S
    -S      Set the source file to sync (default: $fSyncFile)
    -u      Set the username for sync command (default: $fSyncUsername)
    -p      Set the password for sync command (default: $fSyncPassword)
    -h      Print this help message

Example:
    $scriptName -h
    $scriptName -C  // Only run Configure
    $scriptName -o  // Only run build commands
    $scriptName -m FGT_VM64_KVM -j4 -bC
    $scriptName -m FGT_VM64_KVM -j4 -bc
    $scriptName -bc
    $scriptName -j4 -b
    $scriptName -T1
    $scriptName -T1 -s fgt1 -p "password" -u "admin"
    $scriptName -T1 -s fgt1 -p "password" -u "admin" -S FGT_VM64_KVM-v7-build1662.out
    $scriptName -s fgt1 -S FGT_VM64_KVM-v7-build1662.out

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse the options
while getopts "hm:w:j:cCbB:ofT:s:S:p:u:" opt; do
    case $opt in
        m)
            fMode=$OPTARG
            fModeSpecified=true
            fNeedBuild=true
            ;;
        w)
            fWorkingDir=$OPTARG
            fNeedBuild=true
            ;;
        j)
            fNumOfWorkers=$OPTARG
            fNeedBuild=true
            ;;
        T)
            fMaxBuildAttempt=$OPTARG
            fNeedBuild=true
            ;;
        b)
            fUseBear=true
            fRMCompileCommandsJson=true
            fNeedBuild=true
            ;;
        B)
            fBuildTarget=$OPTARG
            fNeedBuild=true
            ;;
        C)
            fRunConfigure=true
            ;;
        c)
            # Ignore compile_commands.json by default
            fGitClean=true
            ;;
        f)
            fRMCompileCommandsJson=true
            ;;
        s)
            fSyncTarget=$OPTARG
            ;;
        S)
            fSyncFile=$OPTARG
            ;;
        u)
            fSyncUsername=$OPTARG
            ;;
        p)
            fSyncPassword=$OPTARG
            ;;
        o)
            fNeedBuild=true
            ;;
        h)
            usage
            ;;
        ?)
            echo "$userNotation Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$userNotation Illegal non-option arguments: $@"
    exit
fi

# If fNeedBuild is set, then set fRunConfigure to true as well
if [[ "$fNeedBuild" == true ]]; then
    fRunConfigure=true
fi

# Check the working directory
if [[ -x "$(command -v realpath)" ]]; then
    fWorkingDir=$(realpath "$fWorkingDir")
fi
if [[ ! -d "$fWorkingDir" ]]; then
    echo "$userNotation Directory $fWorkingDir not found"
    exit 1
fi

echo "$separator"
echo "$userNotation [w] Set working directory to $fWorkingDir"
echo "$userNotation [B] Set build target to $fBuildTarget"
echo "$userNotation [m] Set build mode to $fMode"
echo "$userNotation [j] Set number of concurrent build jobs to $fNumOfWorkers"
echo "$userNotation [T] Set the maximum number of build attempts to $fMaxBuildAttempt"
echo "$separator2"

[[ "$fGitClean" == true ]] && echo "$userNotation [c] Will Clean the repo"
[[ "$fRunConfigure" == true ]] && echo "$userNotation [C] Will re-run Configure"
[[ "$fNeedBuild" == true ]] && echo "$userNotation [o] Will re-build the project"
[[ "$fUseBear" == true ]] && echo "$userNotation [b] Use bear to generate compile_commands.json"
[[ "$fRMCompileCommandsJson" == true ]] && echo "$userNotation [f] Will remove $compileCommandsFile if exists"
if [[ "$fSyncTarget" != false ]]; then
    echo "$userNotation [s] Scheduled to sync $fSyncFile to $fSyncTarget"
    echo "$userNotation [S] SYNC_FILE ($fSyncFile)"
    echo "$userNotation [u] USER ($fSyncUsername)"
    echo "$userNotation [p] PWD ($fSyncPassword)"
fi
echo "$separator"
# sleep 0.1

# Clean the working directory
if [[ "$fGitClean" == true ]]; then
    echo "$userNotation Cleaning the working directory ..."
    cd "$fWorkingDir" || exit
    gitExcludePattern=""
    for patt in $gitExcludeList; do
        if [[ "$fRMCompileCommandsJson" == true ]]; then
            if [[ "$patt" == "$compileCommandsFile" ]]; then
                # Do not add it to the exclude list
                continue
            fi
        fi
        echo "$subUserNotation Exclude $patt"
        gitExcludePattern+="--exclude=$patt "
    done

    gitCleanCmd="git clean -xdf $gitExcludePattern"
    echo "$subUserNotation Running: $gitCleanCmd"

    sleep 1
    eval "$gitCleanCmd"
    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to clean the working directory"
        exit 1
    else
        echo "$subUserNotation Cleaned the working directory successfully"
    fi
fi

expectPath=$(command -v expect)
if [[ -z "$expectPath" ]]; then
    echo "$userNotation Command expect not found"
    exit 1
fi

# Step 1: Run Configure
if [[ "$fRunConfigure" == true ]]; then
    echo "$userNotation Running Configure ..."
    echo "$subUserNotation Running nopasswd_to_config (Wd:$fWorkingDir, Mode:$fMode)"
    sleep 1

    if [[ "$fModeSpecified" == true ]]; then
        $expectPath -f "$pathOfNoPasswdToConfig" "$fWorkingDir" "$fMode"
    else
        $expectPath -f "$pathOfNoPasswdToConfig" "$fWorkingDir"
    fi

    if [[ $? -ne 0 ]]; then
        echo "$userNotation Failed to run $pathOfNoPasswdToConfig"
        exit 1
    fi
fi

# Step 2: Run build commands
if [[ "$fNeedBuild" != false ]]; then
    # Make make command
    cd "$fWorkingDir" || exit
    makeCommand="make -j$fNumOfWorkers $fBuildTarget"

    # Use Bear to generate compile_commands.json
    if [[ "$fUseBear" == true ]]; then
        bearPath=$(command -v bear)
        if [[ -z "$bearPath" ]]; then
            echo "$userNotation Command bear not found, please install it first"
            echo "$userNotation sudo apt install bear libear -y"
            exit 1
        fi
        pathOfLibear=$(locate libear.so | grep -m 1 libear.so)
        if [[ "$pathOfLibear" != "" ]]; then
            bear="bear -l $pathOfLibear"
        else
            defaultLiBearPath="/usr/lib/x86_64-linux-gnu/bear/libear.so"
            if [[ ! -f "$defaultLiBearPath" ]]; then
                echo "$userNotation libear.so not found, please install it first"
                echo "$userNotation sudo apt install libear -y"
                exit 1
            fi
            bear="bear -l $defaultLiBearPath"
        fi
        makeCommand="$bear $makeCommand"
    fi

    # Check if the existing compile_commands.json is writable
    jsonFile=$compileCommandsFile
    jsonPath=$fWorkingDir/$jsonFile
    if [[ -f "$jsonPath" && ! -w "$jsonPath" ]]; then
        echo "$userNotation Detected $jsonPath is read-only"
        if [[ "$fRMCompileCommandsJson" == true ]]; then
            echo "$subUserNotation Removing $jsonPath"
            rm -f "$jsonPath"
            if [[ $? -ne 0 ]]; then
                echo "$subUserNotation Failed to remove $jsonPath"
                exit 1
            fi
        else
            echo "$subUserNotation Just keep $jsonPath as it is"
        fi
    fi

    # Loop to build the projects
    attempt=1
    maxAttempt=$fMaxBuildAttempt
    while [[ $attempt -le $maxAttempt ]]; do
        echo "$userNotation Running build commands: $makeCommand"
        echo "$subUserNotation Build attempt $attempt/$maxAttempt"
        # [[ $attempt -gt 1 ]] && sleep 2
        sleep 2

        eval "$makeCommand"
        eval_status=$?
        if [[ $eval_status -eq 0 ]]; then
            break
        else
            attempt=$((attempt + 1))
        fi
    done

    if [[ $eval_status -ne 0 ]]; then
        echo "$userNotation Build projects failed."
        echo "$subUserNotation Suggest to clean the working directory and try again."
        exit 1
    fi

    # Remove the write privilege of compile_commands.json
    if [[ -f "$jsonPath" && -w "$jsonPath" ]]; then
        echo "$userNotation $jsonPath is writable"
        echo "$userNotation Remove the write privilege of $jsonPath"
        chmod -w "$jsonPath"
        if [[ $? -ne 0 ]]; then
            echo "$userNotation Failed to remove the write privilege of $jsonPath"
            exit 1
        fi
    fi

    echo "$userNotation Congratulations! You have built projects successfully at $(getCurrentTime)."
fi

# Here is the real expect script
#expect -c '                                                                                                      [30/48592]
#      for {set i 1} {$i <= 5} {incr i} {
#          set timeout 10
#          send_user "@@@@ @ Attempt $i/5\n"
#
#          spawn -noecho scp /data/fos2/image.out admin@fgt1:/fgt-image
#          expect {
#              "*assword:" {
#                  send "password\r"
#                  exp_continue
#              }
#              "yes/no" {
#                  send "yes\r"
#                  exp_continue
#              }
#              "Host key verification failed." {
#                  send_user "@@@@ @ Host key verification failed. Updating known_hosts file...\n"
#                  system "ssh-keygen -R fgt1"
#                  send_user "@@@@ @ Host key removed from known_hosts file. Retrying SCP...\n"
#                  continue
#              }
#              eof {
#                  break
#              }
#          }
#      }
#  '

# Step 3: Sync the sync_file to the target machine
if [[ "$fSyncTarget" != false ]]; then
    syncFiles=($(find "$fWorkingDir" -name "$fSyncFile"))
    if [[ ${#syncFiles[@]} -eq 0 ]]; then
        echo "$userNotation $fSyncFile not found in $fWorkingDir"
        exit 1
    fi
    # Only sync the first file found
    syncFile="${syncFiles[0]}"
    echo "$userNotation Syncing $syncFile to $fSyncTarget"

    maxSyncRetries=5
    ESUCCESS=0
    EMAXTRIES=$(($maxSyncRetries + 1))
    ETIMEOUT=$(($maxSyncRetries + 10))
    EFAILED=$((ETIMEOUT + 1))
    # If not use escape for $i, it will be replaced by the value of $i, since it is in the bash environment.
    # But \$i will keep as $i in the expect script generated.
    # expect -d -c "
    expect -c "
        # Set the initial values
        set defaultTimeout 120
        set adjustTimeout 0
        set waitBeforeRetry 10

        # Loop to sync the file
        for {set i 1} {\$i <= $maxSyncRetries} {incr i} {
            send_user \"$subUserNotation Sync attempt \$i/$maxSyncRetries\n\"
            spawn -noecho scp $syncFile ${fSyncUsername}@${fSyncTarget}:/fgt-image
            if {\$adjustTimeout != 0} {
                set timeout \$adjustTimeout
            } else {
                set timeout \$defaultTimeout
            }

            expect {
                \"*assword:\" {
                    send \"$fSyncPassword\r\"
                    exp_continue
                }
                \"yes/no\" {
                    send \"yes\r\"
                    exp_continue
                }
                \"Host key verification failed.\" {
                    send_user \"$subUserNotation Host key verification failed. Updating known_hosts file...\n\"
                    system \"ssh-keygen -R $fSyncTarget\"
                    send_user \"$subUserNotation Host key removed from known_hosts file.\n\"
                    send_user \"$subUserNotation Retrying SCP immediately...\n\"
                    continue
                }
                -re {Connection refused|No route to host} {
                    set adjustTimeout -1
                    send_user \"$subUserNotation Waiting for \$waitBeforeRetry seconds before retrying...\n\"
                    sleep \$waitBeforeRetry
                    # Exponential backoff
                    set waitBeforeRetry [expr {\$waitBeforeRetry * 2}]
                    continue
                }
                \"501-Permission Denied\" {
                    send_user \"$subUserNotation Permission Denied. Exiting...\n\"
                    exit $EFAILED
                }
                \"check image error\" {
                    send_user \"$subUserNotation Check image error. Exiting...\n\"
                    # exp_continue
                    exit $EFAILED
                }
                \"lost connection\" {
                    send_user \"$subUserNotation Lost connection. Exiting...\n\"
                    exit $EFAILED
                }
                timeout {
                    send_user \"$subUserNotation Timeout. Exiting...\n\"
                    exit $ETIMEOUT
                }
                eof {
                    send_user \"$subUserNotation Reaching EOF.\n\"
                    exit $ESUCCESS
                }
            }
        }
        exit \$i
    "

    retValue=$?
    [[ $retValue -ne 0 ]] && echo "$subUserNotation Sync return value: $retValue"

    case $retValue in
        0)
            echo "$userNotation You have synced $fSyncFile to $fSyncTarget successfully at $(getCurrentTime)."
            echo "$userNotation Login to the server and wait for it to reboot ..."
            jssh -u "$fSyncUsername" -p "$fSyncPassword" -t "$fSyncTarget"
            if [[ $? -ne 0 ]]; then
                echo "$subUserNotation Please check the server status manually."
                exit 1
            else
                echo "$subUserNotation Connection to fpx1 closed at $(getCurrentTime)."
                exit 0
            fi
            ;;
        $EMAXTRIES)
            echo "$userNotation Failed to sync $fSyncFile to $fSyncTarget after $maxSyncRetries attempts"
            exit $EMAXTRIES
            ;;
        $ETIMEOUT)
            echo "$userNotation Timeout to sync $fSyncFile to $fSyncTarget"
            exit $ETIMEOUT
            ;;
        *)
            echo "$userNotation Failed to sync $fSyncFile to $fSyncTarget"
            exit $EFAILED
            ;;
    esac
fi
