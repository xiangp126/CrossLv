#!/bin/bash

# Common Variables
scriptName=$(basename $0)

# Build flags & Options
fPlatform="FOS" # Default platform
ftntBuildTarget="image.out"
fBuildTarget="$ftntBuildTarget"
fBuildModel=""
fNumOfJobs=$(nproc)
fWorkingDir=$(pwd)
fMaxBuildAttempt=1
fUseBear=false
fRunConfigure=false
fNeedBuild=false
fPrintBuildFlags=false # Print build flags
fGitClean=false
fRMCompileCommandsJson=false
# Sync Options
fSyncTarget=false
fSyncFile=$fBuildTarget
fSyncPort=22
fSyncUsername="admin"
fSyncPassword="password"

# Git associated variables
compileCommandsFile="compile_commands.json"
gitExcludePattern1=$compileCommandsFile
gitExcludePattern2="\*.code-workspace"
gitExcludeList="$gitExcludePattern1 $gitExcludePattern2"

# Pretty print
USER_NOTATION="@@@@"
SUB_USER_NOTATION="@@@@ @"
# SHORT_SEPARATOR="--------------"
# SEPARATOR="---------------------------------------------------"
# SHORT_SEPARATOR2="=============="
SEPARATOR2="==================================================="

# Define color variables
CYAN='\033[36m'
RED='\033[31m'
BOLD='\033[1m'
GREEN='\033[32m'
BLUE='\033[34m'
# YELLOW='\033[33m'
RESET='\033[0m'

getCurrentTime() {
    COLOR="$RED"
    echo -e "${COLOR}$(date +"%m/%d/%Y %H:%M:%S")${RESET}"
}

# https://patorjk.com/software/taag/
showLogo() {
    cat << _EOF
      _              __          ___      ___
     (_)__ _  ___ _ / /__ ___   / _ \    |_  |
    / //  ' \/ _ '//  '_// -_) / // /_  / __/
 __/ //_/_/_/\_,_//_/\_\ \__/  \___/(_)/____/
|___/
_EOF
}

usage() {
    cat << _EOF
Usage: $scriptName [options]
       $scriptName [-m model] [-w working_dir] [-j num_of_jobs] [-T max_attempt]
             [-s sync_target] [-S sync_file] [-P sync_port] [-l/-u username] [-p password]
             [-B build_target]
             [-bcCohf]

Build Flags:
    -c      Clean the repo (default: $fGitClean)
    -C      Run Configure intelligently (default: $fRunConfigure)
    -o      Run build commands (set automatically if any of the [bmjwT] options is set)
    -b      Use Bear to generate $compileCommandsFile (default: $fUseBear)
    -f      Remove $compileCommandsFile (default: $fRMCompileCommandsJson)
Build Options:
    -T      Set the maximum number of build attempts (default: $fMaxBuildAttempt)
    -B      Set the build target (default: $fBuildTarget)
    -m      Set the build model  (default: $fBuildModel)
    -j      Set the number of jobs (default: $fNumOfJobs)
    -w      Set working directory  (default: $fWorkingDir)
Sync Options:
    -s      Set the sync source file (default: $fSyncFile)
    -t      Set the sync target machine (default: $fSyncTarget)
    -P      Set the sync ssh port (default: $fSyncPort)
    -l/-u   Set the sync username (default: $fSyncUsername)
    -p      Set the sync password (default: $fSyncPassword)
Other Options:
    -h      Print this help message

Example:
    $scriptName -m FGT_VM64_KVM -c -T1 -j4 -b
    $scriptName -t fgt1 -s FGT_VM64_KVM-v7-build1662.out -u "admin" -p "password" -P 22
    $scriptName -h

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse the options
while getopts "hm:w:j:cCbB:ofT:t:s:P:p:u:l:" opt; do
    case $opt in
        m)
            fBuildModel=$OPTARG
            fNeedBuild=true
            ;;
        w)
            fWorkingDir=$OPTARG
            fNeedBuild=true
            ;;
        j)
            fNumOfJobs=$OPTARG
            fNeedBuild=true
            ;;
        T)
            fMaxBuildAttempt=$OPTARG
            fNeedBuild=true
            ;;
        b)
            fUseBear=true
            fRMCompileCommandsJson=true
            fNeedBuild=true
            ;;
        B)
            fBuildTarget=$OPTARG
            fNeedBuild=true
            ;;
        C)
            fRunConfigure=true
            ;;
        c)
            # Ignore compile_commands.json by default
            fGitClean=true
            ;;
        f)
            fRMCompileCommandsJson=true
            ;;
        t)
            fSyncTarget=$OPTARG
            ;;
        s)
            fSyncFile=$OPTARG
            ;;
        P)
            fSyncPort=$OPTARG
            ;;
        l)
            fSyncUsername=$OPTARG
            ;;
        u)
            fSyncUsername=$OPTARG
            ;;
        p)
            fSyncPassword=$OPTARG
            ;;
        o)
            fNeedBuild=true
            ;;
        h)
            usage
            ;;
        ?)
            echo "$USER_NOTATION Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$USER_NOTATION Illegal non-option arguments: $@"
    exit
fi

# $1: available models, $2: target model
searchModel() {
    matchedModels=()
    local availModels="$1"
    local targetModel="$2"
    for model in $availModels; do
        if [[ "$model" == *"$targetModel"* ]]; then
            matchedModels+=("$model")
        fi
    done

    COLOR="$RED"
    case ${#matchedModels[@]} in
        0)
            echo -e "$USER_NOTATION No matched model found for ${COLOR}$targetModel${RESET}"
            exit 1
            ;;
        1)
            fBuildModel="${matchedModels[0]}"
            ;;
        *)
            echo "$USER_NOTATION Multiple matched models found for $targetModel"
            echo "$USER_NOTATION Please specify the model from the following list:"
            for model in "${matchedModels[@]}"; do
                echo -e "$USER_NOTATION ${COLOR}$model${RESET}"
            done
            exit 1
            ;;
    esac
}

preParseOptions() {
    # Set fRunConfigure to true if fNeedBuild is true
    [[ "$fNeedBuild" == true ]] && fRunConfigure=true

    [[ "$fGitClean" == true || "$fRunConfigure" == true || "$fNeedBuild" == true
     || "$fUseBear" == true || "$fRMCompileCommandsJson" == true ]] && fPrintBuildFlags=true

    [[ "$fPrintBuildFlags" == false ]] && return

    command -v realpath >/dev/null 2>&1 && fWorkingDir=$(realpath "$fWorkingDir")
    if [[ ! -d "$fWorkingDir" ]]; then
        echo "$USER_NOTATION Directory $fWorkingDir not found"
        exit 1
    fi

    cd "$fWorkingDir" || exit
    if [[ ! -x "$(command -v ./Configure)" ]]; then
        echo "$USER_NOTATION Command Configure not found in $fWorkingDir"
        exit 1
    fi
    availModels="$(./Configure list)"
    for model in $availModels; do
        if [[ "$model" == "FPX"* ]]; then
            fPlatform="FPX"
            fBuildModel="$model"
            break
        fi
    done

    # Upper case the build model
    fBuildModel=$(echo "$fBuildModel" | tr '[:lower:]' '[:upper:]')

    if [[ "$fPlatform" == "FPX" ]]; then
        if [[ "$fBuildModel" == "" ]]; then
            fBuildModel="FPX_KVM"
        else
            searchModel "$availModels" "$fBuildModel"
        fi
    else
        # The platform is FOS
        if [[ "$fBuildModel" == "" ]]; then
            fBuildModel="FGT_VM64_KVM"
        elif [[ "$fBuildModel" == "VMWARE" ]]; then
            fBuildModel="FGT_VM64"
        else
            searchModel "$availModels" "$fBuildModel"
        fi
    fi
}

# Pre-parse the options
preParseOptions

# Print the Logo
showLogo

echo $SEPARATOR2
if [[ "$fPrintBuildFlags" != false ]]; then
    COLOR="$GREEN"
    # echo "$SEPARATOR"
    echo -e "${BOLD}Build Flags:${RESET}"
    # echo "$SHORT_SEPARATOR"
    [[ "$fGitClean"     == true ]] && echo -e "$USER_NOTATION [c] ${COLOR}Clean${RESET} the repo"
    [[ "$fRunConfigure" == true ]] && echo -e "$USER_NOTATION [C] ${COLOR}Configure${RESET} the project"
    [[ "$fNeedBuild"    == true ]] && echo -e "$USER_NOTATION [o] ${COLOR}Build${RESET} the project"
    [[ "$fUseBear"      == true ]] && echo -e "$USER_NOTATION [b] ${COLOR}Generate${RESET} compile_commands.json using bear"
    [[ "$fRMCompileCommandsJson" == true ]] && echo -e "$USER_NOTATION [f] ${COLOR}Remove${RESET} $compileCommandsFile if exists"
fi

if [[ "$fNeedBuild" != false ]]; then
    # echo "$SEPARATOR"
    echo -e "${BOLD}Build Optioins:${RESET}"
    # echo "$SHORT_SEPARATOR"
    COLOR="$RED"
    echo -e "$USER_NOTATION [m] Build Modle:  ${COLOR}$fBuildModel${RESET}"
    COLOR="$CYAN"
    echo -e "$USER_NOTATION [B] Build Target: ${COLOR}$fBuildTarget${RESET}"
    echo -e "$USER_NOTATION [w] Working Directory: ${COLOR}$fWorkingDir${RESET}"
    echo -e "$USER_NOTATION [T] Maximum Build Attempts: ${COLOR}$fMaxBuildAttempt${RESET}"
    echo -e "$USER_NOTATION [j] Concurrent Build Jobs:  ${COLOR}$fNumOfJobs${RESET}"
fi

if [[ "$fSyncTarget" != false ]]; then
    COLOR="$RED"
    # echo "$SEPARATOR"
    echo -e "${BOLD}Sync Optioins:${RESET}"
    # echo "$SHORT_SEPARATOR"
    echo -e "$USER_NOTATION [s] Scheduled to sync ${COLOR}$fSyncFile${RESET} to ${COLOR}$fSyncTarget${RESET}"
    echo -e "$USER_NOTATION [u] USER:     (${COLOR}$fSyncUsername${RESET})"
    echo -e "$USER_NOTATION [p] PASSWORD: (${COLOR}$fSyncPassword${RESET})"
    echo -e "$USER_NOTATION [S] SYNC_FILE:   (${COLOR}$fSyncFile${RESET})"
    echo -e "$USER_NOTATION [S] SYNC TARGET: (${COLOR}$fSyncTarget${RESET})"
fi
echo "$SEPARATOR2"
# sleep 0.1

# Clean the working directory
if [[ "$fGitClean" == true ]]; then
    echo "$USER_NOTATION Cleaning the working directory ..."
    cd "$fWorkingDir" || exit
    gitExcludePattern=""
    for patt in $gitExcludeList; do
        if [[ "$fRMCompileCommandsJson" == true ]]; then
            if [[ "$patt" == "$compileCommandsFile" ]]; then
                # Do not add it to the exclude list
                continue
            fi
        fi
        echo "$SUB_USER_NOTATION Exclude $patt"
        gitExcludePattern+="--exclude=$patt "
    done

    gitCleanCmd="git clean -xdf $gitExcludePattern"
    echo "$SUB_USER_NOTATION Running: $gitCleanCmd"

    sleep 1
    eval "$gitCleanCmd"
    if [[ $? -ne 0 ]]; then
        echo "$USER_NOTATION Failed to clean the working directory"
        exit 1
    else
        echo "$SUB_USER_NOTATION Cleaned the working directory successfully"
    fi
fi

expectPath=$(command -v expect)
if [[ -z "$expectPath" ]]; then
    echo "$USER_NOTATION Command expect not found"
    exit 1
fi

# Step 1: Run Configure
if [[ "$fRunConfigure" == true ]]; then
    COLOR="$BLUE"
    CONFIGURE_CMD="./Configure -m $fBuildModel -d y -c"
    echo -e "$USER_NOTATION Running Configure: ${COLOR}$CONFIGURE_CMD${RESET}"
    sleep 1

    # expect -d -c "
    expect -c "
        set script_to_get_credentials ~/.usr/bin/get_credentials
        source \"\$script_to_get_credentials\"

        set config_bash_prompt \"$ \"
        send_user \"$SUB_USER_NOTATION Spawning a new bash session.\n\"
        spawn -noecho bash
        log_user 1
        expect \"\$config_bash_prompt\"
        send \"cd $fWorkingDir\r\"
        expect \"\$config_bash_prompt\"
        send \"$CONFIGURE_CMD\r\"
        # log_user 1

        set timeout 180
        expect {
            \"Username:\" {
                send \"\$ftnt_username\r\"
                exp_continue
            }
            \"Password for '\$ftnt_username':\" {
                send \"\$ftnt_password\r\"
                exp_continue
            }
            \"\$config_bash_prompt\" {
                # log_user 0
                # send \"exit\r\"
                send \"\x04\r\"
            }
            timeout {
                send_user \"$SUB_USER_NOTATION Timeout. Action aborted.\n\"
                exit 1
            }
        }

        expect eof
    "

    echo "$SUB_USER_NOTATION Exiting from the spawned session."

    if [[ $? -ne 0 ]]; then
        echo "$SUB_USER_NOTATION Failed to run Configure."
        exit 1
    else
        echo "$SUB_USER_NOTATION Configure completed successfully."
    fi
fi

# Step 2: Run build commands
if [[ "$fNeedBuild" != false ]]; then
    # Make make command
    cd "$fWorkingDir" || exit
    makeCommand="make -j$fNumOfJobs $fBuildTarget"

    # Use Bear to generate compile_commands.json
    if [[ "$fUseBear" == true ]]; then
        bearPath=$(command -v bear)
        if [[ -z "$bearPath" ]]; then
            echo "$USER_NOTATION Command bear not found, please install it first"
            echo "$USER_NOTATION sudo apt install bear libear -y"
            exit 1
        fi
        pathOfLibear=$(locate libear.so | grep -m 1 libear.so)
        if [[ "$pathOfLibear" != "" ]]; then
            bear="bear -l $pathOfLibear"
        else
            defaultLiBearPath="/usr/lib/x86_64-linux-gnu/bear/libear.so"
            if [[ ! -f "$defaultLiBearPath" ]]; then
                echo "$USER_NOTATION libear.so not found, please install it first"
                echo "$USER_NOTATION sudo apt install libear -y"
                exit 1
            fi
            bear="bear -l $defaultLiBearPath"
        fi
        makeCommand="$bear $makeCommand"
    fi

    # Check if the existing compile_commands.json is writable
    jsonFile=$compileCommandsFile
    jsonPath=$fWorkingDir/$jsonFile
    if [[ -f "$jsonPath" && ! -w "$jsonPath" ]]; then
        echo "$USER_NOTATION Detected $jsonPath is read-only"
        if [[ "$fRMCompileCommandsJson" == true ]]; then
            echo "$SUB_USER_NOTATION Removing $jsonPath"
            rm -f "$jsonPath"
            if [[ $? -ne 0 ]]; then
                echo "$SUB_USER_NOTATION Failed to remove $jsonPath"
                exit 1
            fi
        else
            echo "$SUB_USER_NOTATION Just keep $jsonPath as it is"
        fi
    fi

    # Loop to build the projects
    attempt=1
    maxAttempt=$fMaxBuildAttempt
    while [[ $attempt -le $maxAttempt ]]; do
        COLOR="$GREEN"
        echo -e "$USER_NOTATION Running build commands: ${COLOR}$makeCommand${RESET}"
        echo -e "$SUB_USER_NOTATION ${COLOR}Build attempt $attempt/$maxAttempt${RESET}"
        # [[ $attempt -gt 1 ]] && sleep 2
        sleep 2

        eval "$makeCommand"
        eval_status=$?
        if [[ $eval_status -eq 0 ]]; then
            break
        else
            attempt=$((attempt + 1))
        fi
    done

    if [[ $eval_status -ne 0 ]]; then
        echo "$USER_NOTATION Build projects failed."
        echo "$SUB_USER_NOTATION Suggest to clean the working directory and try again."
        exit 1
    fi

    # Remove the write privilege of compile_commands.json
    if [[ -f "$jsonPath" && -w "$jsonPath" ]]; then
        echo "$USER_NOTATION $jsonPath is writable"
        echo "$USER_NOTATION Remove the write privilege of $jsonPath"
        chmod -w "$jsonPath"
        if [[ $? -ne 0 ]]; then
            echo "$USER_NOTATION Failed to remove the write privilege of $jsonPath"
            exit 1
        fi
    fi

    echo "$USER_NOTATION Congratulations! You have built projects successfully at $(getCurrentTime)."
fi

# Step 3: Sync the SYNC_FILE to the target machine
if [[ "$fSyncTarget" != false ]]; then
    syncFiles=($(find "$fWorkingDir" -name "$fSyncFile"))
    if [[ ${#syncFiles[@]} -eq 0 ]]; then
        echo "$USER_NOTATION $fSyncFile not found in $fWorkingDir"
        exit 1
    fi
    # Only sync the first file found
    syncFile="${syncFiles[0]}"
    COLOR="$BLUE"
    echo -e "$USER_NOTATION Syncing ${COLOR}$syncFile${RESET} to ${COLOR}$fSyncTarget${RESET} ..."

    maxSyncRetries=5
    ESUCCESS=0
    EMAXTRIES=$(($maxSyncRetries + 1))
    ETIMEOUT=$(($maxSyncRetries + 10))
    EFAILED=$((ETIMEOUT + 1))
    # If not use escape for $i, it will be replaced by the value of $i, since it is in the bash environment.
    # But \$i will keep as $i in the expect script generated.
    # expect -d -c "
    expect -c "
        # Set the initial values
        set defaultTimeout 600
        set adjustTimeout 0
        set waitBeforeRetry 10
        set passwd_prompt_cnt 0

        # Loop to sync the file
        for {set i 1} {\$i <= $maxSyncRetries} {incr i} {
            send_user \"$SUB_USER_NOTATION Sync attempt \$i/$maxSyncRetries\n\"
            spawn -noecho scp -P $fSyncPort $syncFile ${fSyncUsername}@${fSyncTarget}:/fgt-image
            if {\$adjustTimeout != 0} {
                set timeout \$adjustTimeout
            } else {
                set timeout \$defaultTimeout
            }

            expect {
                \"bad port\" {
                    send_user \"$SUB_USER_NOTATION Bad port. Connecting aborted.\n\"
                    exit $EFAILED
                }
                {yes/no} {
                    send \"yes\r\"
                    exp_continue
                }
                -nocase {Password:} {
                    incr passwd_prompt_cnt
                    if {\$passwd_prompt_cnt > 1} {
                        send_user \"\n$SUB_USER_NOTATION Permission Denied. Please specify the login credentials.\n\"
                        exit $EFAILED
                    }
                    send \"$fSyncPassword\r\"
                    exp_continue
                }
                \"Host key verification failed.\" {
                    send_user \"$SUB_USER_NOTATION Host key verification failed. Updating known_hosts file...\n\"
                    send_user \"$SUB_USER_NOTATION Executing: ssh-keygen -R $fSyncTarget\n\"
                    system \"ssh-keygen -R $fSyncTarget\"
                    send_user \"$SUB_USER_NOTATION Host key removed from known_hosts file.\n\"
                    send_user \"$SUB_USER_NOTATION Retrying SCP immediately...\n\"
                    continue
                }
                -re {Connection refused|No route to host} {
                    set adjustTimeout -1
                    send_user \"$SUB_USER_NOTATION Waiting for \$waitBeforeRetry seconds before retrying...\n\"
                    sleep \$waitBeforeRetry
                    # Exponential backoff
                    set waitBeforeRetry [expr {\$waitBeforeRetry * 2}]
                    continue
                }
                \"501-Permission Denied\" {
                    send_user \"$SUB_USER_NOTATION Permission Denied. Please enable admin-scp under 'config system global'.\n\"
                    exit $EFAILED
                }
                \"check image error\" {
                    send_user \"$SUB_USER_NOTATION Check image error. Action aborted.\n\"
                    # exp_continue
                    exit $EFAILED
                }
                \"100-update image completed\" {
                    send_user \"$SUB_USER_NOTATION 100-update image completed. Action completed.\n\"
                    exit $ESUCCESS
                }
                \"lost connection\" {
                    send_user \"$SUB_USER_NOTATION Lost connection. Action aborted.\n\"
                    exit $EFAILED
                }
                timeout {
                    send_user \"$SUB_USER_NOTATION Timeout. Action aborted.\n\"
                    exit $ETIMEOUT
                }
                eof {
                    send_user \"$SUB_USER_NOTATION Reaching EOF.\n\"
                    exit $ESUCCESS
                }
            }
        }
        exit \$i
    "

    retValue=$?
    [[ $retValue -ne 0 ]] && echo "$SUB_USER_NOTATION Sync return value: $retValue"

    case $retValue in
        $ESUCCESS)
            COLOR="$GREEN"
            echo -e "$SUB_USER_NOTATION You have synced $fSyncFile to $fSyncTarget successfully at $(getCurrentTime)."
            echo -e "$SUB_USER_NOTATION ${COLOR}Login to the server and wait for it to reboot${RESET} ..."
            jssh -P "$fSyncPort" -u "$fSyncUsername" -p "$fSyncPassword" -t "$fSyncTarget"
            if [[ $? -ne 0 ]]; then
                echo "$SUB_USER_NOTATION Please check the server status manually."
                exit 1
            else
                echo -e "$SUB_USER_NOTATION Target ${COLOR}$fSyncTarget${RESET} started to reboot at $(getCurrentTime)."
                exit 0
            fi
            ;;
        $EMAXTRIES)
            echo "$SUB_USER_NOTATION Failed to sync $fSyncFile to $fSyncTarget after $maxSyncRetries attempts"
            exit $EMAXTRIES
            ;;
        $ETIMEOUT)
            echo "$SUB_USER_NOTATION Timeout to sync $fSyncFile to $fSyncTarget"
            exit $ETIMEOUT
            ;;
        *)
            echo "$SUB_USER_NOTATION Failed to sync $fSyncFile to $fSyncTarget"
            exit $EFAILED
            ;;
    esac
fi
