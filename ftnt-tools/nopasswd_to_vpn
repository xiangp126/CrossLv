#!/usr/bin/expect -f
set header_exp get_credentials

# Get the real directory of the script, resolving any symlinks
set script_path [file normalize [info script]]
# puts "script path is : $script_path"

# Determine the directory of the real script
set script_directory [file dirname $script_path]

# Source the other Expect script in the same directory
source "$script_directory/$header_exp"

set mode ""
if {$argc > 0} {
    set mode [lindex $argv 0]
}

if {$mode == "r"} {
    send_user "Restarting forticlient service\n"
    system "sudo systemctl restart forticlient.service"
}

# spawn /opt/forticlient/fortivpn connect "SCM SSLVPN" -u $username -w -s -a

set timeout 15
set max_retry 5
set i 1
set loop_prompt "Error"
set token_prompt "FortiToken"

while {$i <= $max_retry} {
    spawn -noecho sudo /opt/forticlient/vpn -s scm.van.corp.fortinet.com:443 -u $ftnt_username -p
    expect {
        {yes/no} {
            send "y\r"
            exp_continue
        }
        -re {[Uu]sername} {
            send "$ftnt_username\r"
            exp_continue
        }
        -re {[Pp]assword} {
            send "$ftnt_password\r"
            exp_continue
        }
        "Confirm" {
            send "y\r"
            exp_continue
        }
        $loop_prompt {
            send_user "@@@@ Error found, retry $i\n\n"
            incr i
            continue
        }
        $token_prompt {
            # Prompt for and read the FortiToken from the user
            break
        }
        timeout {
            # Handle timeout actions, such as error handling
            puts "Timed out waiting for a response."
            exit 1
        }
    }
    incr i
}

if {$i > $max_retry} {
    send_user "\n@@@@ Maximum retry reached, exit\n"
    send_user "Please try the following commands:\n"
    send_user "sudo rm /opt/forticlient/ems_*.crt\n"
    send_user "sudo systemctl restart forticlient.service\n"
    exit 1
}

expect_user -re "(.*)\n"
set token $expect_out(1,string)
send "$token\r"

interact
