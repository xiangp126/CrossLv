#!/usr/bin/env python3
import os
import sys
import subprocess
import getopt

def verify_exe_file():
    print(f"{user_notation} Verifying", exe_file_path)
    if not os.path.exists(exe_file_path):
        print("Error: {} does not exist".format(exe_file_path))
        sys.exit(1)
    # -nx: prevents GDB from reading the .gdbinit initialization file.
    # cmd = ['gdb', exe_file_path, '-q', '-batch', '-nx', '-ex', 'quit']
    cmd = ['gdb', exe_file_path, '-q', '-batch', '-ex', 'quit']
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    except Exception as e:
        print(e)
        sys.exit(1)

def start_decoding(pointer, f):
    cmd = ['gdb', exe_file_path, '-q', '-batch', '-nx', '-ex', 'list *' + pointer, '-ex', 'quit']
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    except Exception as e:
        print(e)
        sys.exit(1)

    if result.returncode == 0:
        # Split the output into lines
        lines = result.stdout.split('\n')

        # Print the first and middle lines if the verbose flag is set
        if lines:
            first_line = lines[0]
            middle_line_index = len(lines) // 2
            middle_line = lines[middle_line_index]

            combined_line=f"{first_line}"
            if verbose_flag:
                combined_line = f"{first_line}\n{middle_line}"
            print(combined_line)
            if write_flag:
                f.write(f"{combined_line}\n")
                f.flush()
    else:
        print(f"{user_notation} Error running GDB command:")
        print(result.stderr)

def read_crash_file():
    # print(f"{user_notation} Reading", crash_log_path)
    print(f"{user_notation} Reading", crash_log_path)
    if not os.path.exists(crash_log_path):
        print(f"{user_notation} Error: '{crash_log_path}' does not exist")
        sys.exit(1)
    with open(crash_log_path, "r") as f:
        return f.readlines()

# Function to check if a line contains a function pointer
def extract_func_pointer(line):
    if line.strip() != "":
        for s in line.split():
            # add the check len(s) == 12 to avoid the case like [0x7f4a1850fdeb].
            if len(s) <= 12 and s[0] == '[' and s[-1] == ']':
                return s[1:-1]
    return ""

def print_help(script_name, exe_file_path, crash_log_path):
    print(f"0.1.0\n")
    print(f"Usage: {script_name} [OPTIONS]")
    print("\nOptions:")
    print("  -e, --exe <exe_file_path>    Path to the executable file (default: {})".format(exe_file_path))
    print("  -c, --crash <crash_log_path> Path to the crash log file (default: {})".format(crash_log_path))
    print("  -o, --output <output_path>   Path to the crash decode output file (default: {})".format(crash_decode_output))
    print("  -w, --write                  Enable write mode")
    print("  -v, --verbose                Enable verbose mode")
    print("  -h, --help                   Display this help message")
    print("\nExample:")
    print(f"  {script_name} -e {exe_file_path} -c {crash_log_path} -o {crash_decode_output} -w -v")
    print(f"  {script_name} -w -v")
    print(f"  {script_name} -v\n")

def main():
    script_name = os.path.basename(sys.argv[0])
    global user_notation, exe_file_path, crash_log_path, crash_decode_output, write_flag, verbose_flag
    user_notation = "@@@@"
    exe_file_path = "./sysinit/init"
    crash_log_path = "/data/bugzilla/crash.txt"
    crash_decode_output = "~/.crash/crash_decoded.txt"
    write_flag = False
    verbose_flag = False

    try:
        opts, args = getopt.getopt(sys.argv[1:], "he:c:o:wv", ["help", "exe=", "crash=", "output=", "write", "verbose"])
    except getopt.GetoptError as err:
        print(err)
        sys.exit(1)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print_help(script_name, exe_file_path, crash_log_path)
            sys.exit(0)
        elif opt in ("-e", "--exe"):
            exe_file_path = arg
        elif opt in ("-c", "--crash"):
            crash_log_path = arg
        elif opt in ("-o", "--output"):
            crash_decode_output = arg
        elif opt in ("-w", "--write"):
            write_flag = True
        elif opt in ("-v", "--verbose"):
            verbose_flag = True

    # expanduser() expands '~' to the user's home directory
    exe_file_path = os.path.expanduser(exe_file_path)
    crash_log_path = os.path.expanduser(crash_log_path)
    crash_decode_output = os.path.expanduser(crash_decode_output)

    print(f"{user_notation} Printing Arguments:")
    print(f"write_flag:", write_flag)
    print(f"verbose_flag:", verbose_flag)
    print(f"exe_file_path:", exe_file_path)
    print(f"crash_log_path:", crash_log_path)
    print(f"crash_decode_output:", crash_decode_output)

    verify_exe_file()
    crash_lines = read_crash_file()

    f = None
    if write_flag:
        # 'w+' will create the file if it doesn't exist
        f = open(crash_decode_output, 'w+')
        f.close()
        f = open(crash_decode_output, 'a')

    print(f"{user_notation} Start Decoding ...")
    for line in crash_lines:
        # Check if the line contains a function pointer
        pointer = extract_func_pointer(line)
        if pointer != "":
            start_decoding(pointer, f)
        else:
            # Print the line as is if it doesn't contain a function pointer
            print(line.strip())
            if write_flag:
                f.write(line)
                f.flush()

    if write_flag:
        f.close()
        print(f"{user_notation} Done Decoding. The output is saved in", crash_decode_output)
    else:
        print(f"{user_notation} Congratulations! The crashlog has been decoded successfully.")

# Entry point for the script
if __name__ == "__main__":
    main()
