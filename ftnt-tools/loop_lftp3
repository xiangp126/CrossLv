#!/usr/bin/expect

# Set the pattern to look for in the output
set pattern "Access failed: 553"
set lftp_prompt "~> "
set bash_prompt "$ "
set timeout -1
set pattern_found 0
set bashScriptPath "/tmp/myloop_lftp3.sh"

# Set the number of iterations
set max_iterations 100
set user_notation "@@@@"

# Get the size of the PDF file transfered to the server
set bash_prompt "$ "
set expected_pdf_size 285442
set file_size 0
set pdf_file_path "/home/corsair/Uploads/fortiauto.pdf"

# Define a function to create or reuse the Bash script
proc createBashScript {} {
    global bashScriptPath
    if {![file exists $bashScriptPath]} {
        # The temporary script file does not exist, create it
        set bashScript {#!/bin/bash
file_path="/home/test/fortiauto.pdf"
ssh client2 "stat -c %s $file_path"
}
        # Write the Bash script content to the temporary file
        set scriptFile [open $bashScriptPath "w"]
        puts $scriptFile $bashScript
        close $scriptFile

        # Make the temporary script file executable
        exec chmod +x $bashScriptPath
    }
}

# Call the function to create or reuse the Bash script
createBashScript

# Check if an argument for max_iterations was provided
if {[llength $argv] > 0} {
    set max_iterations [lindex $argv 0]
}

spawn lftp -d -e "set ssl:verify-certificate no" -u test,test client2
set lftp_spawn_id $spawn_id

for {set i 1} {$i <= $max_iterations} {incr i} {
    set spawn_id $lftp_spawn_id
    expect $lftp_prompt
    send "put $pdf_file_path\r"

    expect {
        -re $pattern {
            # Pattern found
            puts "\n$user_notation Pattern '$pattern' Found in the output (Iteration $i)."
            set pattern_found 1
            exp_continue
        }
        timeout {
            puts "Timeout occurred. Pattern not found in the output."
        }
		$lftp_prompt
    }

    if {$pattern_found == 0} {
        # Call the Bash script to get the file size
        puts -nonewline "\n$user_notation "
        spawn $bashScriptPath
        log_user 0
        set bash_spawn_id $spawn_id
        expect {
            -re "(\\d+)" {
                set file_size $expect_out(1,string)
            }
            default {
                puts "Failed to get the file size from the Bash script."
                exit
            }
        }

        wait
        log_user 1

        # Check if the file size is as expected
        if {$file_size == $expected_pdf_size} {
            puts "$user_notation Pattern '$pattern' Not Found in the output (Iteration $i)."
            puts "$user_notation The size of fortiauto.pdf is as expected: $file_size bytes."
        } else {
            puts "$user_notation The size of fortiauto.pdf is not as expected. Actual size: $file_size bytes."
            send -i $lftp_spawn_id "\r"
            break
        }
    }

    # for next loop
    set pattern_found 0
    send -i $lftp_spawn_id "\r"

    sleep 1
}

set spawn_id $lftp_spawn_id
expect $lftp_prompt
send "exit\r"
expect $bash_prompt

if {$i < $max_iterations} {
    puts "\n$user_notation Pattern '$pattern' Not Found in the output (Iteration $i)."
    if {$file_size == $expected_pdf_size} {
        puts "$user_notation The size of fortiauto.pdf is as expected: $file_size bytes."
    } else {
        puts "$user_notation The size of fortiauto.pdf is not as expected. Actual size: $file_size bytes."
    }
} else {
    puts "\n$user_notation Maximum number of iterations ($max_iterations) reached."
}

# somehow this mode does not work with spawn_id specified
# expect -i $spawn_id {
#     -re $pattern1 {
#         #
#     }
#     $pattern2 {

#     }
# }
