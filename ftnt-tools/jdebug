#!/bin/bash

# Recommend to set wad worker count to 1 to make life easier.
# FPX # config system global
# FPX (global) # set wad-worker-count 1
# FPX (global) # end

# SSH Local Forwarding
# -L [bind_address:]port:host:hostport
# -N Do not execute a remote command. This is useful for just forwarding ports.
# Topology: Local(127.0.0.1) -> Jump server(172.18.20.226) -> Remote(10.40.1.101)
# $ ssh -N -L 127.0.0.1:8888:10.40.1.101:22 test@172.18.20.226
# test@172.18.20.226's password:
#
# $ netstat -tulnp | grep -i 8888
# tcp        0      0 127.0.0.1:8888          0.0.0.0:*               LISTEN      1208750/ssh
#
# and then
# $ ssh -l admin -p 8888 localhost
# or use
# $ jssh -t localhost -P 8888

# Variables
scriptName=$(basename "$0")
fTarget="fgt1"
fWorkerType="worker"
fSSHConnPort=22
fUsername="admin"
fPassword="password"
fPrompt="# "
fGDBServerListenPort=444
fWADWorkerKeep=-1
fWADWorkerCnt=$fWADWorkerKeep # 0: unlimited, 1: 1 worker, -1: keep the original value
fMaxAttempts=2
# Pretty print
userNotation="@@@@"
subUserNotation="@@@@ @"
separator="----------------------------------------------------------------"

usage() {
    cat << _EOF
jdebug 0.0.1

Usage: $scriptName [options]
       $scriptName [-t target] [-w worker_type] [-P gdbserver_listen_port] [-T max_attempts]
              [-u/-l username] [-p password] [-P ssh_conn_port] [-h]

Options:
    -t      Target device name or IP address(default: $fTarget)
    -w      Worker type(default: $fWorkerType)
    -d      GDB Server listen port(default: $fGDBServerListenPort)
    -l/-u   Username(default: $fUsername)
    -p      Password(default: $fPassword)
    -P      SSH connection port(default: $fSSHConnPort)
    -N      Set wad worker count(default: $fWADWorkerCnt)
            0: unlimited, 1: 1 worker to make life easier, -1: keep the original value
    -T      Maximum attempt(default: $fMaxAttempts)
    -h      Print this help message

Example:
    $scriptName -t fgt1
    $scriptName -t fgt1 -P 22
    $scriptName -t fgt1 -p "123" -N1
    $scriptName -t fgt1 -w algo -d 9229
    $scriptName -t fgt1 -w algo -d 9229 -l "admin" -p "123"
    $scriptName -h

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse the options
while getopts "t:w:d:T:l:u:p:P:N:h" opt; do
    case $opt in
        t)
            fTarget=$OPTARG
            ;;
        w)
            fWorkerType=$OPTARG
            ;;
        d)
            fGDBServerListenPort=$OPTARG
            ;;
        T)
            fMaxAttempts=$OPTARG
            ;;
        P)
            fSSHConnPort=$OPTARG
            ;;
        l)
            fUsername=$OPTARG
            ;;
        u)
            fUsername=$OPTARG
            ;;
        p)
            fPassword=$OPTARG
            ;;
        N)
            fWADWorkerCnt=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "$userNotation Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$userNotation Illegal non-option arguments: $@"
    exit
fi

fSearchPatt="type=.*$fWorkerType"
echo $separator
echo "$userNotation [t]Set Target Device to: $fTarget"
echo "$userNotation [w]Set Worker Type to: $fWorkerType(Search Pattern: $fSearchPatt)"
echo "$userNotation [d]Set GDB Server Listen Port to: $fGDBServerListenPort"
echo "$userNotation [P]Set SSH Connection Port to: $fSSHConnPort"
echo "$userNotation [l]Set Username to: $fUsername"
echo "$userNotation [p]Set Password to: $fPassword"
echo "$userNotation [T]Set Maximum Attempts to: $fMaxAttempts"
# if $wadWorkerCnt is larger or equal to 0, then print the message.
if [ "$fWADWorkerCnt" -ge 0 ]; then
    echo "$userNotation [N]Set WAD Worker Count to: $fWADWorkerCnt"
fi
echo "$userNotation Connecting to $fTarget ..."
echo $separator

# expect -d -c "
expect -c "
    # Set your SSH credentials
    set i 1
    set timeout 3
    set has_vdom 0

    # Define ANSI color codes with capitalized names
    # Full list can be found here: http://en.wikipedia.org/wiki/ANSI_escape_code
    # https://stackoverflow.com/questions/12879483/color-texts-at-expect-shell
    set RESET   \"\033\[0m\"
    set BOLD    \"\033\[1m\"
    set RED     \"\033\[31m\"
    set GREEN   \"\033\[32m\"
    set YELLOW  \"\033\[33m\"
    set BLUE    \"\033\[34m\"
    set MAGENTA \"\033\[35m\"
    set CYAN    \"\033\[36m\"
    set WHITE   \"\033\[37m\"

    while {\$i <= $fMaxAttempts} {
        # ssh -o StrictHostKeyChecking=no $fTarget
        if {\$i > 1} {
            send_user \"$userNotation Login attempt \$i/$fMaxAttempts\n\"
        }
        spawn -noecho ssh -p $fSSHConnPort $fUsername@$fTarget

        set session_id \$spawn_id
        set passwd_prompt_cnt 0
        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                incr passwd_prompt_cnt
                if {\$passwd_prompt_cnt > 1} {
                    send_user \"\n$userNotation Permission denied. Please specify the login credentials.\n\"
                    exit 1
                }
                send \"$fPassword\r\"
                exp_continue
            }
            \"Connection refused\" {
                # send_user \"Connection refused when connecting to $fTarget\n\"
                exit 1
            }
            {Host key verification failed.} {
                send_user \"$userNotation Host key verification failed. Updating known_hosts file...\n\"
                system \"ssh-keygen -R $fTarget\"
                send_user \"$userNotation Host key removed from known_hosts file.\n\"
                send_user \"$userNotation Retrying SSH immediately...\n\"
                # close \$session_id
                incr i
                continue
            }
            # $fPrompt must be quoted.
            \"$fPrompt\" {
                break
            }
            timeout {
                send_user \"$subUserNotation Timeout when connecting to $fTarget\n\"
                # close \$session_id
                incr i
                continue
            }
            eof {
                send_user \"$subUserNotation Reached EOF. Program ended.\n\"
                send_user \"$subUserNotation Please check if $fTarget is a correct device name.\n\"
                exit 1
            }
        }
    }

    if {\$i > $fMaxAttempts} {
        send_user \"$userNotation Failed to connect to $fTarget\"
        exit 1
    }

    if {$fWADWorkerCnt >= 0} {
        send \"config system global\r\"
        expect {
            {Command fail.} {
                # The device has VDOM
                set has_vdom 1
                expect \"$fPrompt\"
                send \"config global\r\"
                expect \"$fPrompt\"
                send \"config system global\r\"
                exp_continue
            }
            \"$fPrompt\" {
                # Pass through
            }
            timeout {
                send_user \"$userNotation Timeout when resetting debug.\r\"
                exit 1
            }
        }
        send \"set wad-worker-count $fWADWorkerCnt\r\"
        expect \"$fPrompt\"
        send \"end\r\"
        expect \"$fPrompt\"
        send \"end\r\"
        expect \"$fPrompt\"

        # set wait_time 3
        # send_user \"$userNotation Wait for \$wait_time seconds to apply the configuration.\n\"
        # for {set j 0} {\$j < \$wait_time * 2} {incr j} {
        #     send_user \"====\"
        # }
        # send_user \"\n\"
        # for {set i 0} {\$i < \$wait_time * 2} {incr i} {
        #     send_user \"====\"
        #     after 500
        # }
        # send \"\r\"
        # expect \"$fPrompt\"

        send \"exit\r\"
        expect eof {
            send_user \"$userNotation WAD Worker Count has been set to $fWADWorkerCnt.\n\"
            exit 0
        }
    }

    if {\$has_vdom} {
        send \"config global\r\"
        expect \"$fPrompt\"
    }
    send \"diagnose debug disable\r\"
    set timeout 30
    expect {
        {Command fail.} {
            # The device has VDOM
            expect \"$fPrompt\"
            send \"config global\r\"
            exp_continue
        }
        \"$fPrompt\" {
            # Pass through
        }
        timeout {
            send_user \"$userNotation Timeout when resetting debug.\r\"
            exit 1
        }
    }
    send \"diagnose debug enable\r\"
    expect \"$fPrompt\"
    send \"diagnose test application wad 1000\r\"
    expect \"$fPrompt\"
    set output \$expect_out(buffer)

    # Search for the line with \"type=worker\" and extract the PID
    set worker_pid \"\"
    set worker_cnt 0
    set worker_pids {}

    # Define the pattern to match
    set search_patt $fSearchPatt
    # send_user \"$userNotation Searching for \$search_patt\n\"

    foreach line [split \$output \"\n\"] {
            if {[regexp \$search_patt \$line]} {
            # Extract the PID from the line
            set pid_regex {pid=(\d+)}
            if {[regexp \$pid_regex \$line match worker_pid]} {
                # Add the matched PID to the list. lappend: list append.
                lappend worker_pids \$worker_pid
                incr worker_cnt
            }
        }
    }

    if {\$worker_cnt > 1} {
        if {[string match \"*work*\" $fWorkerType]} {
            send_user \"\n$userNotation \${RED}Warning:\${RESET} \$worker_cnt PIDs found: \${RED}\$worker_pids\${RESET} for WAD process of type \${YELLOW}$fWorkerType\${RESET}.\n\"
            send_user {$userNotation Recommend to set wad worker count to 1 to make life easier.
$subUserNotation FPX # config system global
$subUserNotation FPX (global) # set wad-worker-count 1
$subUserNotation FPX (global) # end
$userNotation Or retry the same command with -N1
            }
        } else {
            send_user \"\n$userNotation \${RED}Warning:\${RESET} \$worker_cnt PIDs found: \${RED}\$worker_pids\${RESET} for WAD process of type \${YELLOW}$fWorkerType\${RESET}.\"
            send_user \"\n$userNotation Please check if the input type is correct.\n\"
        }
    } elseif {\$worker_cnt == 1} {
        send_user \"\n$userNotation Exact PID: \${GREEN}\$worker_pid\${RESET} found for WAD process of type \${RED}$fWorkerType\${RESET}.\n\"
    } else {
        send_user \"\n$userNotation Could not find WAD process of type \${YELLOW}$fWorkerType\${RESET}.\n\"
        exit 1
    }

    set worker_pid [lindex \$worker_pids 0]

    send \"\r\"
    expect \"$fPrompt\"

    send \"diagnose debug disable\r\"
    set timeout 30
    expect \"$fPrompt\"

    send \"sys sh\r\"
    expect {
        \"Unknown action\" {
            send_user \"$userNotation No Shell supported. Please check the image version.\n\"
            exit 1
        }
        \"$fPrompt\" {
            # Do nothing, just continue
        }
    }

    # start gdbserver
    set timeout -1
    send \"gdbserver 0.0.0.0:$fGDBServerListenPort --attach \$worker_pid\r\"

    # \x03 is used to send a Ctrl-C signal when the trap detects the SIGINT (Ctrl-C) signal.
    trap {
        # Disable console logging. The output may contain multiple blank lines starts with '/ # '.
        log_user 0
        send_user \"\n$userNotation CTRL+C captured; sending SIGINT to gdbserver as well.\n\"
        send \x03
        send_user \"$userNotation Debugging session terminated.\n\"
    } SIGINT

    # interact
    log_user 1
    expect \"$fPrompt\"
"

# Process [0]: WAD manager type=manager(0) pid=1014 diagnosis=yes.
# Process [1]: type=worker(2) index=0 pid=18369 state=running
#               diagnosis=no debug=enable valgrind=supported/disabled
# Process [2]: type=algo(3) index=0 pid=1061 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [3]: type=informer(4) index=0 pid=1051 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [4]: type=user-info(5) index=0 pid=1052 state=running
#               diagnosis=no debug=enable valgrind=supported/disabled
# Process [5]: type=dev-vuln(6) index=0 pid=1053 state=running
#               diagnosis=no debug=enable valgrind=supported/disabled
# Process [6]: type=cert-inspection(9) index=0 pid=1054 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [7]: type=YouTube-filter-cache-service(10) index=0 pid=1055 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [8]: type=debug(12) index=0 pid=1056 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [9]: type=config-notify(13) index=0 pid=1057 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [10]: type=tls-fgpt-service(14) index=0 pid=1058 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [11]: type=ia-cache(15) index=0 pid=1059 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
# Process [12]: type=isolator(16) index=0 pid=1060 state=running
#               diagnosis=no debug=enable valgrind=unsupported/disabled
