#!/bin/bash

# SSH Port Forwarding
# -L [bind_address:]port:host:hostport
# -N Do not execute a remote command. This is useful for just forwarding ports.
# Topology:
# Local(127.0.0.1):8881 --- SSH Connect --- Jump Server(172.18.20.226):22 --- Forward Traffic --- Remote(10.40.1.101):22
# Usage:
# $ ssh -N -L Local_IP:Local_Port:Remote_IP:Remote_Port Jump_User@Jump_IP:Jump_Port
# Jump_User@Jump_IP's Passwd:
#
# Give an example:
# $ ssh -N -L 127.0.0.1:8881:10.40.1.101:22 test@172.18.20.226
# test@172.18.20.226's Passwd:
#
# $ netstat -tulnp | grep -i 8881
# tcp        0      0 127.0.0.1:8881          0.0.0.0:*               LISTEN      1208750/ssh
#
# and then
# $ ssh -l admin -p 8881 localhost
# or use
# $ jssh -l admin -P 8881 -t localhost

# Variables
scriptName=$(basename $0)
fSSHPort=22
fSSHUser="admin"
fPasswd="password"
fExpect="sftp>"
fSSHTarget="fgt1"
fMaxAttempts=2
# Print Pretty
USER_NOTATION="@@@@"
SEPARATOR="----------------------------------------------------------------"

usage() {
cat << _EOF
$scriptName 0.1

usage:
    $scriptName [-l/-u user] [-p passwd] [-P ssh_port] [-E expect] [-V vdom] -t target_ip

Options:
    -l/-u   username    Username for login. Default is "$fSSHUser"
    -p      password    Password for login. Default is "$fPasswd"
    -t      target      The device to connect to. Default is "$fSSHTarget"
    -P      Port        SSH Port to connect to. Default is "$fSSHPort"
    -E      Expect      Promption to expect(Other than "$fExpect").

Example:
    $scriptName -t fpx1
    $scriptName -t 172.16.67.181 -l admin -p "FGT\!123"
    $scriptName -t 172.16.67.181 -l admin -p "FGT\!123" -P 8822

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage

# Parse command-line options
while getopts "p:l:u:t:P:E:v:h" opt; do
    case ${opt} in
        p)
            fPasswd=$OPTARG
            ;;
        u) # User
            fSSHUser=$OPTARG
            ;;
        l) # User
            fSSHUser=$OPTARG
            ;;
        t)
            fSSHTarget=$OPTARG
            ;;
        E)
            fExpect=$OPTARG
            ;;
        P)
            fSSHPort=$OPTARG
            ;;
        h)
            usage
            ;;
        ?)
            echo "$USER_NOTATION Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift to process non-option arguments. New $1, $2, ..., $@
shift $((OPTIND - 1))
if [[ $# -gt 0 ]]; then
    echo "$USER_NOTATION Illegal non-option arguments: $@"
    exit
fi

# Define color and formatting variables
RED='\033[31m'
MAGENTA='\033[35m'
GREEN='\033[32m'
BLUE='\033[34m'
RESET='\033[0m'

COLOR="$RED"
echo -e "$SEPARATOR"
echo -e "$USER_NOTATION Set Target Device to: ${COLOR}$fSSHTarget${RESET}"
echo -e "$USER_NOTATION Set SSH Connection Port to: ${COLOR}$fSSHPort${RESET}"
echo -e "$USER_NOTATION Set Username to: ${COLOR}$fSSHUser${RESET}"
echo -e "$USER_NOTATION Set Password to: ${COLOR}$fPasswd${RESET}"
echo -e "$USER_NOTATION Set Maximum Attempts to: ${COLOR}$fMaxAttempts${RESET}"
echo "$USER_NOTATION Connecting to $fSSHTarget ..."
# echo -e "$SEPARATOR"

# expect -d -c "
expect -c "
    # Set your SSH credentials
    set i 1
    set timeout 3

    # Define ANSI color codes with capitalized names
    # Full list can be found here: http://en.wikipedia.org/wiki/ANSI_escape_code
    # https://stackoverflow.com/questions/12879483/color-texts-at-expect-shell
    set RESET   \"\033\[0m\"
    set BOLD    \"\033\[1m\"
    set RED     \"\033\[31m\"
    set GREEN   \"\033\[32m\"
    set YELLOW  \"\033\[33m\"
    set BLUE    \"\033\[34m\"
    set MAGENTA \"\033\[35m\"
    set CYAN    \"\033\[36m\"
    set WHITE   \"\033\[37m\"

    while {\$i <= $fMaxAttempts} {
        # ssh -o StrictHostKeyChecking=no $fSSHTarget
        if {\$i > 1} {
            send_user \"$USER_NOTATION Login attempt \$i/$fMaxAttempts\n\"
        }
        spawn -noecho sftp -P $fSSHPort $fSSHUser@$fSSHTarget

        set session_id \$spawn_id
        set passwd_prompt_cnt 0
        expect {
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                incr passwd_prompt_cnt
                if {\$passwd_prompt_cnt > 1} {
                    send_user \"\n$USER_NOTATION Permission denied. Please specify the login credentials.\n\"
                    exit 1
                }
                send \"$fPasswd\r\"
                exp_continue
            }
            {Host key verification failed.} {
                send_user \"$USER_NOTATION Host key verification failed. Updating known_hosts file...\n\"
                system \"ssh-keygen -R $fSSHTarget\"
                send_user \"$USER_NOTATION Host key removed from known_hosts file.\n\"
                send_user \"$USER_NOTATION Retrying SSH immediately...\n\"
                # close \$session_id
                incr i
                continue
            }
            {No route to host} {
                send_user \"$USER_NOTATION No route to host. Exiting...\n\"
                exit 1
            }
            \"$fExpect\" {
                break
            }
            timeout {
                send_user \"$USER_NOTATION Timed out waiting for a response.\n\"
                # close \$session_id
                incr i
                continue
            }
            eof {
                send_user \"$USER_NOTATION Reached EOF. Program ended.\n\"
                exit 1
            }
        }
    }

    if {\$i > $fMaxAttempts} {
        send_user \"$USER_NOTATION Failed to connect to $fSSHTarget\n\"
        exit 1
    }

    puts -nonewline \"$USER_NOTATION \${MAGENTA}Successfully connected to $fSSHTarget\${RESET}\"
    flush stdout
    send \"\r\"

    proc handle_eof {} {
        global MAGENTA COLOR RESET
        set COLOR \$MAGENTA
        send_user \"$USER_NOTATION \${COLOR}Bye-bye.\${RESET}\n\"
        exit 1
    }

    interact {
        # \x04 is code for Ctrl-D
        \x04 {
            handle_eof
        }
    }
"
