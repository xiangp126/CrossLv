#!/bin/bash
# set -x

GETCOLORS="$HOME/Templates/getcolors.sh"
USER_NOTATION="@@@@"
BANNER="---------------------------------"
BANNER2="------------CURRENT--------------"
BANNER3="--------------NOW----------------"
USERNAME=$(whoami)
HOSTNAME=$(hostname)

[ ! -f "$GETCOLORS" ] && echo "File not found: $GETCOLORS" && exit 1
source "$GETCOLORS"

declare -A gateway_ips=(
    ["fgt1"]="192.168.103.6"
    ["fgt2"]="192.168.103.1"
    ["fgt3"]="192.168.103.4"
    ["fpx1"]="192.168.103.2"
    ["fpx2"]="192.168.103.3"
    ["fpx3"]="192.168.103.5"
    ["host_br1"]="192.168.101.254"
    ["host_br2"]="192.168.102.254"
    ["host_br3"]="192.168.103.254"
    ["host_router"]="172.16.67.1"
)

# To have bidirectional mapping between the keys and values.
declare -A reverse_gateway_ips
for key in "${!gateway_ips[@]}"; do
    reverse_gateway_ips["${gateway_ips[$key]}"]=$key
done

# for key in "${!reverse_gateway_ips[@]}"; do
#     echo "$key => ${reverse_gateway_ips[$key]}"
# done

help() {
    # Extract keys into a separate array and sort them
    sorted_keys=($(for key in "${!gateway_ips[@]}"; do echo "$key"; done | sort))
    echo "Usage: $(basename "$0") <fpx1>"
    echo $BANNER
    echo "AVAILABLE GATEWAYS TO PICK FROM"
    echo $BANNER
    for gateway_name in "${sorted_keys[@]}"; do
        echo "[$gateway_name == ${gateway_ips[$gateway_name]}]"
    done
    echo $BANNER2
    echo "$USER_NOTATION default via $current_gw_ip(${reverse_gateway_ips[$current_gw_ip]}) dev $device"
    exit 1
}

read -r current_gw_ip device <<< $(ip route show default | awk '/default/ {print $3, $5}')

# In Bash, =~ is used for regular expression matching
if [[ "$USERNAME" != "corsair" || ! "$HOSTNAME" =~ ^client[0-9]+$ || "$OSTYPE" != "linux-gnu" ]]; then
    echo "$USER_NOTATION USERNAME: $USERNAME"
    echo "$USER_NOTATION HOSTNAME: $HOSTNAME"
    echo "$USER_NOTATION OSTYPE: $OSTYPE"
    echo -e "$USER_NOTATION ${COLOR}This script is only for client VMs and the USERNAME corsair and the os platform to be Linux${RESET}"
    help
fi

if [[ -z $1 ]]; then
    help
else
    new_gateway_ip=${gateway_ips[$1]}
    if [[ -z $new_gateway_ip ]]; then
        echo "$USER_NOTATION Error: Gateway name not found"
        exit 1
    fi
fi

echo "$USER_NOTATION Changing the default gateway to $new_gateway_ip"

if [ "$current_gw_ip" = "$new_gateway_ip" ]; then
    echo -e "$USER_NOTATION ${COLOR}The default gateway is already set to $new_gateway_ip(${reverse_gateway_ips[$new_gateway_ip]})${RESET}"
    exit 0
fi

# Change the default gateway
echo "$USER_NOTATION sudo ip route replace default via $new_gateway_ip"
sudo ip route replace default via "$new_gateway_ip"
if [ $? -ne 0 ]; then
    echo "Failed to change the default gateway"
    exit 1
fi

# ip route show default
# @@@@ default via 172.16.67.1 dev enp0s31f6 proto static metric 100
echo "$USER_NOTATION Default gateway has been changed successfully"
read -r new_gateway_ip device <<< $(ip route show default | awk '/default/ {print $3, $5}')
echo $BANNER3
echo -e "$USER_NOTATION ${COLOR}default via $new_gateway_ip(${reverse_gateway_ips[$new_gateway_ip]}) dev $device${RESET}"
