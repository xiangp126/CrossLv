#!/bin/bash
# set -x

# Set the header for the Expect script
SCRIPT_NAME=$(basename $0)
GET_COLORS="$HOME/Templates/getcolors.sh"
fForticlientDir="$HOME/Downloads/"
fForticlientPkg="forticlient_7.2.0.0644_amd64.deb"
# fForticlientPkg="forticlient_7.2.6.0872_amd64.deb"
fVpnCmdPath="/opt/forticlient/vpn"

if [ -f "$GET_COLORS" ]; then
    source "$GET_COLORS"
fi

usage() {
cat <<EOF
Usage: $SCRIPT_NAME [-r]
  -r  Restart the forticlient service
  -R  Reinstall forticlient
  -h  Display this help message

EOF
exit 1
}

reInstallForticlient() {
    echo -e "${COLOR}Reinstalling forticlient${RESET}"
    echo -e "${COLOR}Removing forticlient${RESET}"

    sudo apt-get remove forticlient

    echo -e "${COLOR}Installing forticlient${RESET}"
    cd "$fForticlientDir" || exit 1
    if [ ! -f "$fForticlientPkg" ]; then
        echo -e "${COLOR}Forticlient path does not exist${RESET}"
        exit 1
    fi

    sudo apt install ./"$fForticlientPkg"

    if [ $? -ne 0 ]; then
        echo -e "${COLOR}Failed to reinstall forticlient${RESET}"
        exit 1
    else
        echo -e "${COLOR}Successfully installed forticlient${RESET}"
    fi

    # sudo rm /opt/forticlient/ems_*.crt
    sudo systemctl stop forticlient.service
    sudo systemctl start forticlient.service
    echo -e "${COLOR}The status of forticlient service${RESET}"
    sudo systemctl status forticlient.service

    exit 0
}

restartForticlientService() {
    echo -e "${COLOR}Restarting forticlient service${RESET}"
    sudo systemctl restart forticlient.service
    if [ $? -ne 0 ]; then
        echo -e "${COLOR}Failed to restart forticlient service${RESET}"
        exit 1
    else
        echo -e "${COLOR}Successfully restarted forticlient service${RESET}"
        sudo systemctl status forticlient.service
    fi
}

while getopts "rRh" opt; do
    case $opt in
        r)
            restartForticlientService
            ;;
        R)
            reInstallForticlient
            ;;
        h)
            usage
            ;;
        ?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            ;;
    esac
done

if [ ! -f "$fVpnCmdPath" ]; then
    echo -e "${COLOR}VPN command does not exist${RESET}"
    exit 1
fi

if ! command -v get_credentials &> /dev/null; then
    echo "Error: Command get_credentials not found."
    exit 1
fi

if ! credentials_output=$(get_credentials); then
    echo "Error: Failed to get credentials."
    exit 1
fi

mapfile -t credentials <<< "$credentials_output"
ftnt_username=${credentials[0]}
ftnt_password=${credentials[1]}

echo -e "${COLOR}Starting the VPN connection${RESET}"
spawnCmd="sudo $fVpnCmdPath -s scm.van.corp.fortinet.com:443 -u $ftnt_username -p"
echo -e "${COLOR}Spawned command: $spawnCmd${RESET}"

expect -c "
    set timeout 60
    set max_retry 5
    set loop_prompt \"Error\"
    set token_prompt \"FortiToken\"
    set cnt_confirm_prompt 0

    set i 1
    while { \$i <= \$max_retry } {
        spawn -noecho $spawnCmd
        # exp_internal 1
        expect {
            {Confirm (y/n)} {
                incr cnt_confirm_prompt
                puts \"cnt_confirm_prompt: \$cnt_confirm_prompt\"
                if { \$cnt_confirm_prompt <= 1 } {
                    send \"y\r\"
                    exp_continue
                } else {
                    exp_continue
                }
            }
            {yes/no} {
                send \"y\r\"
                exp_continue
            }
            -re {[Uu]sername} {
                send \"$ftnt_username\r\"
                exp_continue
            }
            -re {[Pp]assword} {
                send \"$ftnt_password\r\"
                exp_continue
            }
            {\$loop_prompt} {
                send_user \"@@@@ Error found, retry \$i\n\n\"
                incr i
                continue
            }
            \$token_prompt {
                break
            }
            timeout {
                puts \"Timed out waiting for a response.\"
                exit 1
            }
            eof {
                puts \"EOF reached.\"
                exit 1
            }
        }
        incr i
    }

    if { \$i > \$max_retry } {
        send_user \"\n@@@@ Maximum retry reached, exit\n\"
        send_user \"Please try the following commands:\n\"
        send_user \"sudo rm /opt/forticlient/ems_*.crt\n\"
        send_user \"sudo systemctl restart forticlient.service\n\"
        exit 1
    }

    expect_user -re {(.*)\n}
    set token \$expect_out(1,string)
    send \"\$token\r\"

    set timeout -1
    expect eof
"