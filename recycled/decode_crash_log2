#!/usr/bin/env python3
import os
import sys
import subprocess

def verify_exe_file(exe_file_path):
    print("@@@@ Verifying", exe_file_path)
    cmd = ['gdb', exe_file_path, '-q', '-batch', '-ex', 'quit']
    try:
        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error verifying executable: {e}")
        sys.exit(1)

def start_decoding(exe_file_path, pointers):
    cmd = ['gdb', '--quiet', '--nx', '--interpreter=mi', exe_file_path]
    gdb_process = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    try:
        # Skip over initial lines until the GDB prompt is reached
        while True:
            output_line = gdb_process.stdout.readline()
            if output_line.strip().startswith("(gdb)"):
                break
        for pointer in pointers:
            gdb_command = f"list *{pointer}"
            gdb_process.stdin.write(gdb_command + "\n")
            gdb_process.stdin.flush()

            # Read the result
            result = ""
            while True:
                output_line = gdb_process.stdout.readline()
                if output_line.strip().startswith("(gdb)"):
                    break
                result += output_line

            print(result)

    except Exception as e:
        print(e)
        sys.exit(1)

    finally:
        # Close GDB process
        gdb_process.stdin.close()
        gdb_process.stdout.close()
        gdb_process.stderr.close()

        # Wait for the process to finish
        gdb_process.wait()

def read_crash_file(crash_file_path):
    print("@@@@ Reading", crash_file_path)
    with open(crash_file_path, "r") as f:
        return f.read()

def do_job(exe_file_path, crash_content, output):
    pointers = []
    print_ctl = True
    for line in crash_content.split('\n'):
        print_ctl = True
        for str in line.split():
            if 12 >= len(str) >= 2 and str[0] == '[' and str[-1] == ']':
                print_ctl = False
                pointers.append(str[1:-1])
        if print_ctl:
            if pointers:
                start_decoding(exe_file_path, pointers)
                pointers = []
            else:
                print(line)

def main():
    output = []
    crash_file_path = os.path.expanduser("~") + "/.crash/crash.log"
    exe_file_path = "./sysinit/init"
    if len(sys.argv) >= 2:
        exe_file_path = sys.argv[1]
        if len(sys.argv) == 3:
            crash_file_path = sys.argv[2]

    verify_exe_file(exe_file_path)
    crash_content = read_crash_file(crash_file_path)

    pause_print = False
    print("@@@@ Start Decoding ...")
    do_job(exe_file_path, crash_content, output)

# Entry point for the script
if __name__ == "__main__":
    main()
